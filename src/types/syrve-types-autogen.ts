/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  '/api/1/regions': {
    /** Regions. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Address.RegionsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Address.RegionsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/cities': {
    /** Cities. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Address.CitiesRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Address.CitiesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/streets/by_city': {
    /** Streets by city. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Address.StreetsByCityRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Address.StreetsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/streets/by_id': {
    /** Streets by id or by classifierId. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Address.StreetsByIdRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Address.StreetsByIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/access_token': {
    /** Retrieve session key for API user. */
    post: {
      parameters: {
        header?: {
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Auth.GetAccessTokenRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Auth.GetAccessTokenResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/available_organizations': {
    /**
     * Returns all organizations of current account (determined by Authorization request header) for which banquet/reserve booking are available.
     * @description
     *
     *  > Allowed from version `7.1.5`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/available_terminal_groups': {
    /**
     * Returns all terminal groups of specified organizations, for which banquet/reserve booking are available.
     * @description
     *
     *  > Allowed from version `7.1.5`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.GetTerminalGroupsByOrganizationsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/available_restaurant_sections': {
    /**
     * Returns all restaurant sections of specified terminal groups, for which banquet/reserve booking are available.
     * @description
     *
     *  > Allowed from version `7.1.5`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/restaurant_sections_workload': {
    /**
     * Returns all banquets/reserves for passed restaurant sections.
     * @description
     *
     *  > Allowed from version `7.1.5`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsWorkloadRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsWorkloadResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/create': {
    /**
     * Create banquet/reserve.
     * @description
     *
     *  > Allowed from version `7.1.5`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.CreateReserveRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/status_by_id': {
    /**
     * Retrieve banquets/reserves statuses by IDs.
     * @description
     *
     *  > Allowed from version `7.1.5`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReservesByIdRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReservesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/add_items': {
    /**
     * Add order items.
     * @description Available only for banquets.
     *
     *  > Allowed from version `8.2.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.AddOrderItemsToBanquetRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/cancel': {
    /**
     * Cancel reservation due to some reason.
     * @description Available only for reserves with status 'New'.
     *
     *  > Allowed from version `8.2.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.CancelReserveRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/reserve/add_payments': {
    /**
     * Add order payments.
     * @description Available only for banquets.
     *
     *  > Allowed from version `8.2.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.AddOrderPaymentsToBanquetRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/create': {
    /**
     * Create delivery.
     * @description
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.OrderResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/update_order_problem': {
    /**
     * Update order problem.
     * @description
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderProblemRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/update_order_payments': {
    /**
     * Update order payment details.
     * @deprecated
     * @description > Deprecated, use `api/1/deliveries/change_payments` method instead.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderPaymentsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/update_order_delivery_status': {
    /**
     * Update delivery status.
     * @description
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateDeliveryStatusRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/update_order_courier': {
    /**
     * Update order courier.
     * @description
     *
     *  > Allowed from version `7.1.5`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderCourierRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/add_items': {
    /**
     * Add order items.
     * @description
     *
     *  > Allowed from version `7.4.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.AddOrderItemsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/close': {
    /**
     * Close order.
     * @description > Before version `8.0.6` it's possible to close deliveries with `DeliveryByClient`
     * orderServiceType only, starting from version `8.0.6` it's also possible to close
     * `DeliveryByCourier` deiveries in the DeliveryStatus `OnWay` or `Delivered` .
     *
     *  > Allowed from version `7.4.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CloseDeliveryOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/cancel': {
    /**
     * Cancel delivery order.
     * @description
     *
     *  > Allowed from version `7.5.4`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CancelOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/change_complete_before': {
    /**
     * Change time when client wants the order to be delivered.
     * @description
     *
     *  > Allowed from version `7.5.4`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeCompleteBeforeRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/change_delivery_point': {
    /**
     * Change order's delivery point information.
     * @description
     *
     *  > Allowed from version `7.5.4`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryPointRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/change_service_type': {
    /**
     * Change order's delivery type.
     * @description
     *
     *  > Allowed from version `7.5.4`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/change_payments': {
    /**
     * Change order's payments.
     * @description > Method will fail if there are any processed payments in the order.
     * > If all payments in the order are unprocessed they will be removed and replaced with new ones.
     *
     *  > Allowed from version `7.6.3`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangePaymentsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/change_comment': {
    /**
     * Change delivery comment.
     * @description
     *
     *  > Allowed from version `7.6.1`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryCommentRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/print_delivery_bill': {
    /**
     * Print delivery bill.
     * @description
     *
     *  > Allowed from version `7.6.1`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.PrintDeliveryBillRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/confirm': {
    /**
     * Confirm delivery.
     * @description
     *
     *  > Allowed from version `7.6.1`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ConfirmDeliveryRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/cancel_confirmation': {
    /**
     * Cancel delivery confirmation.
     * @description
     *
     *  > Allowed from version `7.6.1`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.CancelDeliveryConfirmationRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/change_operator': {
    /**
     * Assign/change the order operator.
     * @description
     *
     *  > Allowed from version `7.6.1`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryOperatorRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/add_payments': {
    /**
     * Add order payments.
     * @description
     *
     *  > Allowed from version `8.2.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Orders.Common.AddOrderPaymentsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/by_id': {
    /** Retrieve orders by IDs. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByIdRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/by_delivery_date_and_status': {
    /** Retrieve list of orders by statuses and dates. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndStatusRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/by_revision': {
    /** Retrieve list of orders changed from the time revision was passed. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByRevisionRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/by_delivery_date_and_phone': {
    /** Retrieve list of orders by telephone number, dates and revision. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndPhoneRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/by_delivery_date_and_source_key_and_filter': {
    /** Search orders by search text and additional filters (date, problem, statuses and other). */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndFilterRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/delivery_restrictions': {
    /**
     * Retrieve list of delivery restrictions.
     * @description
     *
     *  > Allowed from version `6.4.16`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.GetDeliveryRestrictionsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.GetDeliveryRestrictionsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/delivery_restrictions/update': {
    /**
     * Update delivery restrictions.
     * @description
     *
     *  > Allowed from version `6.4.16`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.UpdateDeliveryRestrictionsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.UpdateDeliveryRestrictionsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/delivery_restrictions/allowed': {
    /**
     * Get suitable terminal groups for delivery restrictions.
     * @description
     *
     *  > Allowed from version `6.4.16`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.GetAllowedRestrictionsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.GetAllowedRestrictionsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/check_create': {
    /**
     * Check create delivery.
     * @deprecated
     * @description > Deprecated, all checks are available in `api/1/deliveries/create`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.CheckCreateOrderResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/organizations': {
    /**
     * Returns organizations available to api-login user.
     * @deprecated
     * @description > Deprecated, use `POST api/1/organizations`.
     */
    get: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.GetSimpleOrganizationsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
    /** Returns organizations available to api-login user. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/cancel_causes': {
    /**
     * Delivery cancel causes.
     * @description
     *
     *  > Allowed from version `7.7.1`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.CancelCauses.CancelCausesRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.CancelCauses.CancelCausesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/deliveries/order_types': {
    /** Order types. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.OrderTypes.OrderTypesRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.OrderTypes.OrderTypesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/discounts': {
    /** Discounts / surcharges. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Discounts.DiscountsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Discounts.DiscountsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/payment_types': {
    /** Payment types. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypesRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/removal_types': {
    /**
     * Removal types (reasons for deletion).
     * @description
     *
     *  > Allowed from version `7.5.3`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalTypesRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalTypesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/tips_types': {
    /**
     * Get tips types for api-login`s rms group.
     * @description
     *
     *  > Allowed from version `7.7.4`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TipsTypes.TipsTypesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/couriers/locations/by_time_offset': {
    /** Method of obtaining drivers' coordinates history. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.CourierLocationsByTimeOffsetRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.CourierLocationsByTimeOffsetResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/couriers': {
    /** Returns list of all employees which are delivery drivers in specified restaurants. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.CouriersRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.EmployeesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/couriers/by_role': {
    /**
     * Returns list of all employees which are delivery drivers in specified restaurants,
     * and checks whether each employee has passed role.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.CouriersAndCheckRoleRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.EmployeesWithRoleSignResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/couriers/active_location/by_terminal': {
    /**
     * Returns list of all active (courier session is opened) courier's locations which are delivery drivers in specified
     * restaurant and are clocked in on specified delivery terminal.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsByTerminalGroupRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/couriers/active_location': {
    /**
     * Returns list of all active (courier session is opened) courier's locations which are delivery drivers
     * in specified restaurants.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.CouriersRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/info': {
    /** Returns employee info. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.EmployeeInfoRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.EmployeeInfoResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/shift/clockin': {
    /**
     * Open personal session.
     * @description
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.OpenPersonalSessionRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.ChangePersonalSessionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/shift/clockout': {
    /**
     * Close personal session.
     * @description
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.ClosePersonalSessionRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.ChangePersonalSessionResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/employees/shift/is_open': {
    /** Check if personal session is open. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.GetPersonalSessionInfoRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Employees.GetPersonalSessionInfoResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/marketing_sources': {
    /**
     * Marketing sources.
     * @description
     *
     *  > Allowed from version `7.2.5`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSourcesRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSourcesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/nomenclature': {
    /** Menu. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.NomenclatureRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.NomenclatureResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/2/menu': {
    /** External menus with price categories. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.MenusDataResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/2/menu/by_id': {
    /** Retrieve external menu by ID. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.MenuRequest'];
        };
      };
      responses: {
        /** @description success */
        200: {
          content: {
            'application/json': components['schemas']['ExternalMenuPreset'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/stop_lists': {
    /** Out-of-stock items. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.StopListsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.StopListsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/stop_lists/check': {
    /** Check items in out-of-stock list. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.CheckStopListRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.CheckStopListResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/notifications/send': {
    /** Send notification to external systems (Syrve POS and Syrve App). */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Notifications.SendNotificationRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/commands/status': {
    /** Get status of command. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/create': {
    /**
     * Create order.
     * @description
     *
     *  > Allowed from version `7.4.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.CreateTableOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/by_id': {
    /**
     * Retrieve orders by IDs.
     * @description
     *
     *  > Allowed from version `7.4.6`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.GetTableOrdersByIdRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrdersResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/by_table': {
    /**
     * Retrieve orders by tables.
     * @description
     *
     *  > Allowed from version `7.4.6`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.GetTableOrdersByTableRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrdersResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/update_payments': {
    /**
     * Update order payment details.
     * @deprecated
     * @description > Deprecated, use `api/1/order/change_payments` method instead.
     *
     *  > Allowed from version `7.4.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderPaymentsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/add_items': {
    /**
     * Add order items.
     * @description
     *
     *  > Allowed from version `7.4.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.AddOrderItemsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/close': {
    /**
     * Close order.
     * @description
     *
     *  > Allowed from version `7.4.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CloseTableOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/change_payments': {
    /**
     * Change table order's payments.
     * @description > Method will fail if there are any processed payments in the order.
     * > If all payments in the order are unprocessed they will be removed and replaced with new ones.
     *
     *  > Allowed from version `7.7.4`.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangePaymentsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/init_by_table': {
    /**
     * Init orders, created on POS, by tables.
     * @description
     *
     *  > Allowed from version `7.7.1`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.InitTableOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/init_by_posOrder': {
    /**
     * Init orders, created on POS, by POS orders.
     * @description
     *
     *  > Allowed from version `7.7.1`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.InitTableOrderByPosOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/add_customer': {
    /**
     * Add customer to order.
     * @description
     *
     *  > Allowed from version `7.7.1`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.AddCustomerToTableOrderRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/order/add_payments': {
    /**
     * Add order payments.
     * @description
     *
     *  > Allowed from version `8.2.6`.
     *
     *  > This method is a command. Use `api/1/commands/status` method to get the progress status.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Orders.Common.AddOrderPaymentsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/terminal_groups': {
    /** Method that returns information on groups of delivery terminals. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/terminal_groups/is_alive': {
    /** Returns information on availability of group of terminals. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsIsAliveRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsIsAliveResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/terminal_groups/awake': {
    /** Awake terminal groups from sleep mode. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.AwakeTerminalGroupsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.AwakeTerminalGroupsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/webhooks/settings': {
    /** Get webhooks settings for specified organization and authorized API login. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.WebHooks.GetWebHookSettingsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.WebHooks.GetWebHookSettingsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/webhooks/update_settings': {
    /** Update webhooks settings for specified organization and authorized API login. */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.WebHooks.UpdateWebHookSettingsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/info': {
    /**
     * Get customer info.
     * @description Get customer info by specified criterion.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/calculate': {
    /**
     * Calculate checkin.
     * @description Calculate discounts and other loyalty items for an order.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateCheckinRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateCheckinResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/combo': {
    /**
     * Get combos info
     * @description Get all organization's combos.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCombosInfoRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCombosInfoResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/combo/calculate': {
    /**
     * Calculate combo price
     * @description Make combo price calculation.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateComboPriceRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateComboPriceResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/manual_condition': {
    /**
     * Get manual conditions.
     * @description Get all organization's manual conditions.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Common.GetByOrganizationIdRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetManualConditionsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer_category': {
    /**
     * Get customer categories.
     * @description Get all organization's customer categories.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCategoriesRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCategoriesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/create_or_update': {
    /**
     * Create or update customer.
     * @description Create or update customer info by id or phone or card track.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.CreateOrUpdateCustomerRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.CreateOrUpdateCustomerResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer_category/add': {
    /**
     * Add category for customer.
     * @description Add specified category for customer.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer_category/remove': {
    /**
     * Remove category for customer.
     * @description Remove specified category for customer.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/message/send_sms': {
    /**
     * Send sms.
     * @description Send sms message to specified phone number. Sending proceed according Loyalty App organization's settings.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.SendSmsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.SendSmsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/message/send_email': {
    /**
     * Send email.
     * @description Send email message to specified email address. Sending proceed according Loyalty App organization's settings.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.SendEmailRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.SendEmailResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/program': {
    /**
     * Get programs.
     * @description Get all loyalty programs for organization.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.GetProgramsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.GetProgramsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/program/add': {
    /**
     * Add customer to program.
     * @description Add new customer for program.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddCustomerToProgramRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddCustomerToProgramResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/card/add': {
    /**
     * Add card.
     * @description Add new card for customer.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddMagnetCardRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddMagnetCardResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/card/remove': {
    /**
     * Delete card.
     * @description Delete existing card for customer.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteMagnetCardRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteMagnetCardResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/wallet/hold': {
    /**
     * Hold money.
     * @description Hold customer's money in loyalty program. Payment will be process on POS during processing of an order.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.HoldMoneyRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.HoldMoneyResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/wallet/cancel_hold': {
    /**
     * Cancel hold money.
     * @description Cancel holding transaction that created earlier.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.CancelHoldMoneyRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.CancelHoldMoneyResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/wallet/topup': {
    /**
     * Refill balance.
     * @description Refill customer balance.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeUserBalanceRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.RefillUserBalanceResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/customer/wallet/chargeoff': {
    /**
     * Withdraw balance.
     * @description Withdraw customer balance.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeUserBalanceRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.WithdrawUserBalanceResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/coupons/info': {
    /**
     * Get coupon info.
     * @description Get information about the specified coupon.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfoRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfoResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/coupons/series': {
    /**
     * Get coupon series with non-activated coupons.
     * @description Get a list of coupon series in which there are not deleted and not activated coupons.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCouponsRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCouponsResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
  '/api/1/loyalty/iiko/coupons/by_series': {
    /**
     * Get non-activated coupons
     * @description Get list of non-activated coupons.
     */
    post: {
      parameters: {
        header: {
          /** @description Authorization token. */
          Authorization: string;
          /** @description Timeout in seconds. */
          Timeout?: number;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCouponRequest'];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            'application/json': components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCouponResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Request Timeout */
        408: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            'application/json': components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorResponse'];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AllergenGroupDto: {
      /** Format: uuid */
      id?: string;
      /** @description Allergen's code */
      code?: string;
      /** @description Allergen's name */
      name?: string;
    };
    ExternalMenuPreset: {
      /** @description ID of the external menu */
      id?: number;
      /** @description External menu name */
      name?: string;
      /** @description External menu description */
      description?: string;
      itemCategories?: components['schemas']['TransportMenuCategoryDto'][];
    };
    GetExternalMenuWithPriceSourceRequestDto: {
      /** @description id of the requested menu */
      id?: number;
      /**
       * Format: enum
       * @description Price from the external menu or price category
       * @enum {string}
       */
      priceSource?: 'CONFIGURED_IN_MENU' | 'PRICE_CATEGORY';
      organizations?: string[];
      priceCategoryId?: string;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    'iikoNet.Common.Enums.RefillType': 0 | 1 | 2 | 3;
    /**
     * Format: int32
     * @enum {integer}
     */
    'iikoNet.Common.Enums.TemplateType': 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
    /** @description Get request only by organization id */
    'iikoNet.Service.Contracts.Api.iikoTransport.Common.GetByOrganizationIdRequest': {
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId?: string;
    };
    /** @description Add customer to program request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddCustomerToProgramRequest': {
      /**
       * Format: uuid
       * @description Customer id.
       */
      customerId?: string;
      /**
       * Format: uuid
       * @description Program id.
       */
      programId?: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Add customer to program response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddCustomerToProgramResponse': {
      /**
       * Format: uuid
       * @description User wallet id.
       */
      userWalletId?: string;
    };
    /** @description Add magnet card request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddMagnetCardRequest': {
      /**
       * Format: uuid
       * @description Customer id.
       */
      customerId: string;
      /** @description Card track. Can be null. */
      cardTrack: string;
      /** @description Card number. Can be null. */
      cardNumber: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Add magnet card response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddMagnetCardResponse': Record<
      string,
      never
    >;
    /** @description Cancel hold money request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.CancelHoldMoneyRequest': {
      /**
       * Format: uuid
       * @description Transaction id.
       */
      transactionId: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Cancel hold money response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.CancelHoldMoneyResponse': Record<
      string,
      never
    >;
    /** @description Change category for customer request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerRequest': {
      /**
       * Format: uuid
       * @description Customer id.
       */
      customerId: string;
      /**
       * Format: uuid
       * @description Guest category id.
       */
      categoryId: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Change category for customer response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerResponse': Record<
      string,
      never
    >;
    /** @description Change user balance request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeUserBalanceRequest': {
      /**
       * Format: uuid
       * @description Customer id.
       */
      customerId?: string;
      /**
       * Format: uuid
       * @description Wallet id.
       */
      walletId?: string;
      /**
       * Format: double
       * @description Sum of balance change. Must be possible.
       */
      sum?: number;
      /** @description Comment. Can be null. */
      comment?: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Not empty `phone` or `magnetCardTrack` or `id` is required for successful import. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.CreateOrUpdateCustomerRequest': {
      /**
       * Format: uuid
       * @description Customer id.
       */
      id?: string | null;
      /** @description Customer phone. Can be null. */
      phone?: string;
      /** @description Card track. Required if cardNumber set. Can be null. */
      cardTrack?: string;
      /** @description Card number. Required if cardTrack set. Can be null. */
      cardNumber?: string;
      /** @description Customer name. Can be null. */
      name?: string;
      /** @description Customer middle name. Can be null. */
      middleName?: string;
      /** @description Customer surname. Can be null. */
      surName?: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Customer birthday.
       * @example 2019-08-24 14:15:22.123
       */
      birthday?: string | null;
      /** @description Customer email. Can be null. */
      email?: string;
      /**
       * @description Customer sex.
       * <br>0 - not specified,<br />1 - male,<br />2 - female.
       */
      sex?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.IikoNetUserSex'];
      /**
       * @description Customer consent status.
       * <br>0 - unknown,<br />1 - given,<br />2 - revoked.
       */
      consentStatus?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.PersonalDataConsentStatus'];
      /** @description Customer get promo messages (email, sms). If null - unknown. */
      shouldReceivePromoActionsInfo?: boolean | null;
      /** @description Id for referrer guest. Null for old integrations, Guid.Empty - for referrer deletion. Can be null. */
      referrerId?: string;
      /** @description Customer user data. Can be null. */
      userData?: string;
      /**
       * Format: uuid
       * @description Customer organization id.
       */
      organizationId: string;
    };
    /** @description Create or update customer response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.CreateOrUpdateCustomerResponse': {
      /**
       * Format: uuid
       * @description Customer id.
       */
      id?: string;
    };
    /** @description Delete magnet card request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteMagnetCardRequest': {
      /**
       * Format: uuid
       * @description Customer id.
       */
      customerId: string;
      /** @description Card track. Can be null. */
      cardTrack: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Delete magnet card response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteMagnetCardResponse': Record<
      string,
      never
    >;
    /** @description Get categories request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCategoriesRequest': {
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Get categories response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCategoriesResponse': {
      /** @description Guest categories for organization. */
      guestCategories?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCategoryShortInfo'][];
    };
    /** @description Request to get customer by card number. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByCardNumberRequest': {
      type: 'cardNumber';
      /** @description Customer card number. */
      cardNumber?: string;
    } & Omit<
      components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest'],
      'type'
    >;
    /** @description Request to get customer by card track. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByCardTrackRequest': {
      type: 'cardTrack';
      /** @description Customer card track. */
      cardTrack?: string;
    } & Omit<
      components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest'],
      'type'
    >;
    /** @description Request to get customer by email. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByEmailRequest': {
      type: 'email';
      /** @description Customer email. */
      email?: string;
    } & Omit<
      components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest'],
      'type'
    >;
    /** @description Request to get customer by Id. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByIdRequest': {
      type: 'id';
      /** @description Customer id. */
      id?: string;
    } & Omit<
      components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest'],
      'type'
    >;
    /** @description Request to get customer by phone number. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByPhoneRequest': {
      type: 'phone';
      /** @description Customer phone number. */
      phone?: string;
    } & Omit<
      components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest'],
      'type'
    >;
    /** @description Base class for customer info request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest': {
      type: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId?: string;
    };
    /** @description Get customer info response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoResponse': {
      /**
       * Format: uuid
       * @description Guest id.
       */
      id?: string;
      /**
       * Format: uuid
       * @description Guest referrer id.
       */
      referrerId?: string | null;
      /** @description Guest name. Can be null. */
      name?: string;
      /** @description Guest surname. Can be null. */
      surname?: string;
      /** @description Guest middle name. Can be null. */
      middleName?: string;
      /** @description Guest comment. Can be null. */
      comment?: string;
      /** @description Main customer's phone. Can be null. */
      phone?: string;
      /** @description Guest culture name. Can be null. */
      cultureName?: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Guest birthday.
       * @example 2019-08-24 14:15:22.123
       */
      birthday?: string | null;
      /** @description Guest email. Can be null. */
      email?: string;
      /**
       * @description Sex.
       * <br>0 - not specified,<br />1 - male,<br />2 - female.
       */
      sex?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.IikoNetUserSex'];
      /**
       * @description Guest consent status.
       * <br>0 - unknown,<br />1 - given,<br />2 - revoked.
       */
      consentStatus?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.PersonalDataConsentStatus'];
      /** @description Guest anonymized. */
      anonymized?: boolean;
      /** @description Customer's cards. */
      cards?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCardInfo'][];
      /** @description Customer categories. */
      categories?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCategoryShortInfo'][];
      /** @description Customer's user wallets. Contains bonus balances of different loyalty programs. */
      walletBalances?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestBalanceInfo'][];
      /** @description Technical user data, customizable by restaurateur. Can be null. */
      userData?: string;
      /** @description Customer get promo messages (email, sms). If null - unknown. */
      shouldReceivePromoActionsInfo?: boolean | null;
      /** @description Guest should receive loyalty info. */
      shouldReceiveLoyaltyInfo?: boolean | null;
      /** @description Guest should receive order status info. */
      shouldReceiveOrderStatusInfo?: boolean | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Guest personal data consent from.
       * @example 2019-08-24 14:15:22.123
       */
      personalDataConsentFrom?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Guest personal data consent to.
       * @example 2019-08-24 14:15:22.123
       */
      personalDataConsentTo?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Guest personal data processing from.
       * @example 2019-08-24 14:15:22.123
       */
      personalDataProcessingFrom?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Guest personal data processing to.
       * @example 2019-08-24 14:15:22.123
       */
      personalDataProcessingTo?: string | null;
      /** @description Customer marked as deleted. */
      isDeleted?: boolean | null;
    };
    /** @description Information about guest balance. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestBalanceInfo': {
      /**
       * Format: uuid
       * @description Wallet id.
       */
      id?: string;
      /** @description Wallet name. */
      name?: string;
      /**
       * @description Wallet type.
       * <br>0 - deposit or corporate nutrition,<br />1 - bonus program,<br />2 - products program,<br />3 - discount program,<br />4 - certificate program.
       */
      type?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.ProgramType'];
      /**
       * Format: double
       * @description Wallet balance.
       */
      balance?: number;
    };
    /** @description Guest card info. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCardInfo': {
      /**
       * Format: uuid
       * @description Card id.
       */
      id?: string;
      /** @description Card track. */
      track?: string;
      /** @description Card number. */
      number?: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Card valid to date.
       * @example 2019-08-24 14:15:22.123
       */
      validToDate?: string | null;
    };
    /** @description Guest category info. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCategoryShortInfo': {
      /**
       * Format: uuid
       * @description Category id.
       */
      id?: string;
      /** @description Category name. */
      name?: string;
      /** @description Is category active or not. */
      isActive?: boolean;
      /** @description Is category default for new guests or not. */
      isDefaultForNewGuests?: boolean;
    };
    /** @description Hold money request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.HoldMoneyRequest': {
      /**
       * Format: uuid
       * @description Predefined transaction id. Random if empty.
       */
      transactionId?: string | null;
      /**
       * Format: uuid
       * @description Customer id.
       */
      customerId: string;
      /**
       * Format: uuid
       * @description Wallet id.
       */
      walletId: string;
      /**
       * Format: double
       * @description Sum.
       */
      sum: number;
      /** @description Additional information about holding. Can be null. */
      comment?: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Hold money response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.HoldMoneyResponse': {
      /**
       * Format: uuid
       * @description Holding money transaction id.
       */
      transactionId?: string;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.IikoNetUserSex':
      | 0
      | 1
      | 2;
    /**
     * Format: int32
     * @enum {integer}
     */
    'iikoNet.Service.Contracts.Api.iikoTransport.Customer.PersonalDataConsentStatus':
      | 0
      | 1
      | 2;
    /** @description Available combo. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.AvailableCombo': {
      /**
       * Format: uuid
       * @description Id of combo specification, describing combo content.
       */
      specificationId?: string;
      /** @description Groups contained in combo. If null - there is no suitable product in order yet for that group. */
      groupMapping?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboGroupMapping'][];
    };
    /** @description Available payment. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.AvailablePayment': {
      /**
       * Format: uuid
       * @description Marketing campaign id.
       */
      id?: string;
      /**
       * Format: double
       * @description Max sum.
       */
      maxSum?: number;
      /**
       * Format: int32
       * @description Payment order. In case of partial payment, payments with lesser order should be filled first.
       */
      order?: number;
      /** @description Wallet infos. */
      walletInfos?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WalletInfo'][];
    };
    /** @description Request to calculate loyalty operations for order. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateCheckinRequest': {
      /** @description Order. */
      order: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Order'];
      /** @description Number of applied coupon. Can be null. */
      coupon?: string;
      /**
       * Format: uuid
       * @description Referrer id.
       */
      referrerId?: string | null;
      /**
       * Format: uuid
       * @description Identifier of a target terminal. Should be used only when auto distribution is off and no call center operator is available.
       */
      terminalGroupId?: string | null;
      /** @description List of identifiers of applied campaigns. Should be empty if no payment method is used. */
      availablePaymentMarketingCampaignIds?: string[];
      /** @description List of manually applied to order conditions. */
      applicableManualConditions?: string[];
      /** @description Applicable manual discounts. */
      dynamicDiscounts?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.DynamicDiscount'][];
      /** @description Loyalty trace is enabled. */
      isLoyaltyTraceEnabled?: boolean;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Loyalty result for order. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateCheckinResponse': {
      /** @description Loyalty program results. */
      loyaltyProgramResults?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.LoyaltyProgramResult'][];
      /** @description Marketing campaigns with available payments. */
      availablePayments?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.AvailablePayment'][];
      /** @description Warnings about errors, not blocking loyalty calculation. */
      validationWarnings?: string[];
      /** @description Warnings about errors, not blocking loyalty calculation. */
      Warnings?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WarningInfo'][];
      /** @description Loyalty trace. Can be null. */
      loyaltyTrace?: string;
    };
    /** @description Calculate combo price request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateComboPriceRequest': {
      /** @description Items with modifiers included in combo. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'][];
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Calculate combo price response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateComboPriceResponse': {
      /**
       * Format: double
       * @description Calculated price of combo item.
       */
      price?: number;
      /** @description Ids of incorrectly filled groups. If not empty - price will be 0. */
      incorrectlyFilledGroups?: string[];
    };
    /** @description Information about combos of organization. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboCategory': {
      /**
       * Format: uuid
       * @description Category id.
       */
      id?: string;
      /** @description Category name. */
      name?: string;
    };
    /** @description Information about combos group. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboGroup': {
      /**
       * Format: uuid
       * @description Id.
       */
      id?: string;
      /** @description Name. */
      name?: string;
      /** @description Is main group. */
      isMainGroup?: boolean;
      /** @description Products. */
      products?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboProduct'][];
    };
    /** @description Mapping combo's group to OrderItem. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboGroupMapping': {
      /**
       * Format: uuid
       * @description Id of combo group.
       */
      groupId?: string;
      /**
       * Format: uuid
       * @description Id of item, suitable for group.
       */
      itemId?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboPriceModificationType':
      | 0
      | 1
      | 2
      | 3
      | 4
      | 5;
    /** @description Combo product. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboProduct': {
      /**
       * Format: uuid
       * @description Product id.
       */
      productId?: string;
      /**
       * Format: uuid
       * @description Size id.
       */
      sizeId?: string | null;
      /** @description Forbidden modifiers. */
      forbiddenModifiers?: string[];
      /**
       * Format: double
       * @description Price modification amount.
       */
      priceModificationAmount?: number;
    };
    /** @description Information about combos of organization. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboSpecification': {
      /**
       * Format: uuid
       * @description Id of action that added the combo.
       */
      sourceActionId?: string;
      /**
       * Format: uuid
       * @description Combo's category id.
       */
      categoryId?: string | null;
      /** @description Name. Can be null. */
      name?: string;
      /**
       * @description Price modification type.
       * <br>0 - fixed combo price,<br />1 - fixed position price,<br />2 - cheapest position discount,<br />3 - most expensive position discount,<br />4 - percentage discount for each position.
       */
      priceModificationType?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboPriceModificationType'];
      /**
       * Format: double
       * @description Price modification.
       */
      priceModification?: number;
      /** @description Is active. */
      isActive?: boolean | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Start date.
       * @example 2019-08-24 14:15:22.123
       */
      startDate?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Expiration date.
       * @example 2019-08-24 14:15:22.123
       */
      expirationDate?: string | null;
      /**
       * Format: int32
       * @description Lacking groups to suggest.
       */
      lackingGroupsToSuggest?: number | null;
      /** @description Include modifiers. */
      includeModifiers?: boolean | null;
      /** @description Groups. */
      groups?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboGroup'][];
    };
    /** @description Coupon info. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfo': {
      /**
       * Format: uuid
       * @description Id.
       */
      id?: string;
      /** @description Number. Can be null. */
      number?: string;
      /** @description Series name. Can be null. */
      seriesName?: string;
      /**
       * Format: uuid
       * @description Series id.
       */
      seriesId?: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description When activated.
       * @example 2019-08-24 14:15:22.123
       */
      whenActivated?: string | null;
      /** @description Is deleted. */
      isDeleted?: boolean;
    };
    /** @description Coupon info request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfoRequest': {
      /** @description Number. Can be null. */
      number: string;
      /** @description Series. Can be null. */
      series?: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Coupon info response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfoResponse': {
      /** @description Coupon info. */
      couponInfo?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfo'][];
    };
    /** @description Discount operation. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.DiscountOperation': {
      /**
       * @description Operation Type Code.
       * <br>0 - fixed discount for the entire order,<br />1 - fixed discount for the item,<br />2 - free product,<br />3 - other type of discounts.
       */
      code?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.OperationCode'];
      /**
       * Format: uuid
       * @description Deprecated, use positionId.
       */
      orderItemId?: string | null;
      /**
       * Format: uuid
       * @description Id of item the discount is applied to. If null - discount applied to whole orders.
       */
      positionId?: string | null;
      /**
       * Format: double
       * @description Discount sum.
       */
      discountSum?: number;
      /**
       * Format: double
       * @description Amount.
       */
      amount?: number | null;
      /** @description Comment. Can be null. */
      comment?: string;
    };
    /** @description Manual discount. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.DynamicDiscount': {
      /**
       * Format: uuid
       * @description Manual discount condition identifier.
       */
      manualConditionId?: string;
      /**
       * Format: double
       * @description Discount amount.
       */
      Sum?: number;
    };
    /** @description Free item to be added to order. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProduct': {
      /**
       * Format: uuid
       * @description Id of product.
       */
      id?: string | null;
      /** @description Code of product. Can be null. */
      code?: string;
      /** @description Sizes available for that product. */
      size?: string[];
    };
    /** @description Free item to be added to order. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProductsGroup': {
      /**
       * Format: uuid
       * @description Id of action that caused the suggestion.
       */
      sourceActionId?: string;
      /** @description Description for user. Can be null. */
      descriptionForUser?: string;
      /** @description Products that should be added to order. */
      products?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProduct'][];
    };
    /** @description Get combos info request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCombosInfoRequest': {
      /** @description Extra data. */
      extraData?: boolean;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Information about combos of organization. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCombosInfoResponse': {
      /** @description Full combo's specifications. */
      comboSpecifications?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboSpecification'][];
      /** @description Combo's categories. */
      comboCategories?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboCategory'][];
      /** @description Warnings about errors, not blocking loyalty calculation. */
      Warnings?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WarningInfo'][];
    };
    /** @description Get manual conditions response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetManualConditionsResponse': {
      /** @description Info about manual conditions. */
      manualConditions?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ManualConditionInfo'][];
    };
    /** @description Loyalty result for order. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.LoyaltyProgramResult': {
      /**
       * Format: uuid
       * @description Program marketing campaign id.
       */
      marketingCampaignId?: string;
      /** @description Program name. */
      name?: string;
      /** @description Discount operations applied to order items. */
      discounts?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.DiscountOperation'][];
      /** @description Suggested items to add or advices for customer. */
      upsales?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.Upsale'][];
      /** @description Program free products. */
      freeProducts?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProductsGroup'][];
      /** @description Ids of combo specification available in current order. */
      availableComboSpecifications?: string[];
      /** @description Partially added combos, available for assembly. */
      availableCombos?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.AvailableCombo'][];
      /** @description Certificate number is required for activation. */
      needToActivateCertificate?: boolean;
    };
    /** @description Manual condition. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ManualConditionInfo': {
      /**
       * Format: uuid
       * @description Id.
       */
      id?: string;
      /** @description Name of manual condition. */
      caption?: string;
      /** @description Arbitrary discount attribute. */
      isDynamicDiscount?: boolean;
    };
    /** @description Not activated coupon. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCoupon': {
      /**
       * Format: uuid
       * @description Id.
       */
      id?: string;
      /** @description Number. Can be null. */
      number?: string;
      /** @description Series name. Can be null. */
      seriesName?: string;
      /**
       * Format: uuid
       * @description Series id.
       */
      seriesId?: string;
    };
    /** @description Not activated coupon request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCouponRequest': {
      /** @description Series. Can be null. */
      series: string;
      /**
       * Format: int32
       * @description Page size.
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description Page.
       */
      page?: number;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Not activated coupon response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCouponResponse': {
      /** @description Not activated coupon. */
      notActivatedCoupon?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCoupon'][];
    };
    /**
     * Format: int32
     * @description Operation's code.
     * @enum {integer}
     */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.OperationCode':
      | 0
      | 1
      | 2
      | 3;
    /** @description Series with not activated coupons. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCoupons': {
      /**
       * Format: uuid
       * @description Id.
       */
      id?: string;
      /** @description Number. Can be null. */
      number?: string;
    };
    /** @description Series with not activated coupons request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCouponsRequest': {
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Series with not activated coupons response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCouponsResponse': {
      /** @description Series with not activated coupons. */
      seriesWithNotActivatedCoupons?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCoupons'][];
    };
    /** @description user tip. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.Upsale': {
      /**
       * Format: uuid
       * @description Id of action that caused the suggestion.
       */
      sourceActionId?: string;
      /** @description Suggestion text. */
      suggestionText?: string;
      /** @description Codes of products that suggested to be added to order. */
      productCodes?: string[];
    };
    /** @description Wallet info. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WalletInfo': {
      /**
       * Format: uuid
       * @description Wallet id.
       */
      id?: string;
      /**
       * Format: double
       * @description Max sum for payment from the wallet.
       */
      maxSum?: number;
      /** @description Can hold money. */
      canHoldMoney?: boolean;
    };
    /** @description Warning info. */
    'iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WarningInfo': {
      /** @description Code of an error. Can be null. */
      Code?: string;
      /** @description Error code. Can be null. */
      ErrorCode?: string;
      /** @description Description of an error. Can be null. */
      Message?: string;
    };
    /** @description Get programs request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.GetProgramsRequest': {
      /** @description Determines if marketing campaigns not required. */
      withoutMarketingCampaigns?: boolean | null;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Get programs response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.GetProgramsResponse': {
      /** @description Programs. */
      Programs?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.LoyaltyProgram'][];
    };
    /** @description Loyalty program. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.LoyaltyProgram': {
      /**
       * Format: uuid
       * @description Program id.
       */
      id?: string | null;
      /** @description Program name. Can be null. */
      name?: string;
      /** @description Program description. Can be null. */
      description?: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Program works since date.
       * @example 2019-08-24 14:15:22.123
       */
      serviceFrom?: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Program works till date.
       * @example 2019-08-24 14:15:22.123
       */
      serviceTo?: string | null;
      /** @description Notify customer when balance has changed (sms/push). */
      notifyAboutBalanceChanges?: boolean;
      /**
       * @description Program type.
       * <br>0 - deposit or corporate nutrition,<br />1 - bonus program,<br />2 - products program,<br />3 - discount program,<br />4 - certificate program.
       */
      programType?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.ProgramType'];
      /** @description Program is active. */
      isActive?: boolean;
      /**
       * Format: uuid
       * @description Wallet id. Program has only wallet that means global payment type for customers.
       */
      walletId?: string | null;
      /** @description Program marketing campaigns. */
      marketingCampaigns?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignInfo'][];
      /** @description Program applied organizations. */
      appliedOrganizations?: string[];
      /**
       * @description Program template type.
       * <br>0 - None,<br />1 - BonusProgram,<br />2 - DiscountProgram,<br />3 - NthDishProgram,<br />4 - ManualOrderAnonymousDiscount,<br />5 - AutoOrderAnonymousDiscount,<br />6 - AutoDishAnonymousDiscount,<br />7 - PromotionsProgram,<br />8 - NthDishPromotionsProgram.
       */
      templateType?: components['schemas']['iikoNet.Common.Enums.TemplateType'];
      /** @description Program has welcome bonus. */
      hasWelcomeBonus?: boolean;
      /**
       * Format: double
       * @description All new customers will get bonus.
       */
      welcomeBonusSum?: number;
      /** @description Exchange rate for bonuses and real currency. */
      isExchangeRateEnabled?: boolean;
      /** @description Refill type with payment. */
      refillType?: components['schemas']['iikoNet.Common.Enums.RefillType'];
    };
    /** @description Marketing campaign binding info. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo': {
      /**
       * Format: uuid
       * @description Id.
       */
      id?: string | null;
      /** @description Loyalty processing stop after successful execution of binding. So means order of bindings affects. */
      stopFurtherExecution?: boolean;
      /** @description Marketing actions. */
      actions?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignSettingsInfo'][];
      /** @description Marketing conditions. */
      conditions?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignSettingsInfo'][];
    };
    /** @description Marketing campaign info. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignInfo': {
      /**
       * Format: uuid
       * @description Marketing campaign id.
       */
      id?: string | null;
      /**
       * Format: uuid
       * @description Loyalty program id.
       */
      programId?: string | null;
      /** @description Loyalty program name. Can be null. */
      name?: string;
      /** @description Marketing campaign description. Can be null. */
      description?: string;
      /** @description Marketing campaign is active. */
      isActive?: boolean;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Marketing campaign works since date.
       * @example 2019-08-24 14:15:22.123
       */
      periodFrom?: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Marketing campaign works till date. Null means limitless.
       * @example 2019-08-24 14:15:22.123
       */
      periodTo?: string | null;
      /** @description Conditions and actions that will be checked when order is processed. */
      orderActionConditionBindings?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo'][];
      /** @description Conditions and actions that will be checked by schedule. */
      periodicActionConditionBindings?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo'][];
      /** @description Conditions and actions that will be checked by overdraft. */
      overdraftActionConditionBindings?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo'][];
      /** @description Conditions and actions that will be checked by guest registration. */
      guestRegistrationActionConditionBindings?: components['schemas']['iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo'][];
    };
    /** @description Marketing campaign settings info. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignSettingsInfo': {
      /**
       * Format: uuid
       * @description Id.
       */
      id?: string | null;
      /** @description Action/condition settings. Stored as Json. Can be null. */
      settings?: string;
      /** @description Action/condition type name. Can be null. */
      typeName?: string;
      /** @description Hash value of checksum. Can be null. */
      checkSum?: string;
    };
    /** @description Refill user balance response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.RefillUserBalanceResponse': Record<
      string,
      never
    >;
    /** @description Send email request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.SendEmailRequest': {
      /** @description Email address. Can be null. */
      receiver: string;
      /** @description Message subject. Can be null. */
      subject: string;
      /** @description Message body. Can be null. */
      body: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Send email response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.SendEmailResponse': Record<
      string,
      never
    >;
    /** @description Send sms request. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.SendSmsRequest': {
      /** @description Customer's phone number. Can be null. */
      phone: string;
      /** @description Message text. Can be null. */
      text: string;
      /**
       * Format: uuid
       * @description Organization id.
       */
      organizationId: string;
    };
    /** @description Send sms response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.SendSmsResponse': Record<
      string,
      never
    >;
    /** @description Withdraw user balance response. */
    'iikoNet.Service.Contracts.Api.iikoTransport.Organization.WithdrawUserBalanceResponse': Record<
      string,
      never
    >;
    /**
     * Format: int32
     * @description Corporate program type.
     * @enum {integer}
     */
    'iikoNet.Service.Contracts.Api.iikoTransport.ProgramType':
      | 0
      | 1
      | 2
      | 3
      | 4;
    /** @description Organization request DTO. */
    'iikoTransport.PublicApi.Contracts.Address.CitiesRequest': {
      /**
       * @description IDs of organizations that require data return.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /**
       * @description Include deleted cities in response.
       * @example false
       */
      includeDeleted?: boolean;
    };
    /** @description Service response with list of cities. */
    'iikoTransport.PublicApi.Contracts.Address.CitiesResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of cities. */
      cities: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Address.City, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description City DTO. */
    'iikoTransport.PublicApi.Contracts.Address.City': {
      /**
       * Format: uuid
       * @description City ID in RMS.
       */
      id: string;
      /** @description Name. */
      name: string;
      /**
       * Format: int64
       * @description External revision.
       */
      externalRevision?: number | null;
      /** @description Is-Deleted attribute. */
      isDeleted: boolean;
      /** @description ID in classifier, e.g., address database. */
      classifierId?: string | null;
      /** @description City additional information. */
      additionalInfo?: string | null;
    };
    /** @description Delivery district DTO. */
    'iikoTransport.PublicApi.Contracts.Address.Region': {
      /**
       * Format: uuid
       * @description Region ID in RMS.
       */
      id: string;
      /** @description Name. */
      name: string;
      /**
       * Format: int64
       * @description External revision.
       */
      externalRevision?: number | null;
      /** @description Is-Deleted attribute. */
      isDeleted: boolean;
    };
    /** @description Organization request DTO. */
    'iikoTransport.PublicApi.Contracts.Address.RegionsRequest': {
      /**
       * @description IDs of organizations that require data return.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description Service response with list of districts. */
    'iikoTransport.PublicApi.Contracts.Address.RegionsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of districts. */
      regions: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Address.Region, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description Street DTO in Syrve Instance */
    'iikoTransport.PublicApi.Contracts.Address.Street': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
      /**
       * Format: int64
       * @description External system revision No.
       */
      externalRevision?: number | null;
      /** @description ID in classifier, e.g., address database. */
      classifierId?: string | null;
      /** @description Is-Deleted attribute. */
      isDeleted: boolean;
    };
    /** @description Street by id response. */
    'iikoTransport.PublicApi.Contracts.Address.StreetById': {
      /**
       * Format: uuid
       * @description Street id.
       */
      id: string;
      /** @description Street classifierId. */
      classifierId?: string | null;
      /**
       * Format: uuid
       * @description City id.
       */
      cityId: string;
      /** @description City name. */
      cityName: string;
      /** @description Street name. */
      streetName: string;
    };
    /** @description Organization and city request DTO. */
    'iikoTransport.PublicApi.Contracts.Address.StreetsByCityRequest': {
      /**
       * Format: uuid
       * @description Organization ID details of which have to be returned.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description City ID.
       */
      cityId: string;
      /**
       * @description Include deleted streets in response.
       * @example false
       */
      includeDeleted?: boolean;
    };
    /** @description Organization and city request DTO. */
    'iikoTransport.PublicApi.Contracts.Address.StreetsByIdRequest': {
      /**
       * Format: uuid
       * @description Organization Id.
       */
      organizationId: string;
      /** @description Street Ids. */
      ids?: string[] | null;
      /** @description Street classifierIds. */
      classifierIds?: string[] | null;
    };
    /** @description Streets by ids response. */
    'iikoTransport.PublicApi.Contracts.Address.StreetsByIdResponse': {
      /** @description Found streets. */
      streets?: components['schemas']['iikoTransport.PublicApi.Contracts.Address.StreetById'][];
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
    };
    /** @description Service response with list of streets. */
    'iikoTransport.PublicApi.Contracts.Address.StreetsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of streets. */
      streets: components['schemas']['iikoTransport.PublicApi.Contracts.Address.Street'][];
    };
    /**
     * @description Address hints service type.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.AddressHints.AddressHintsServiceType':
      | 'DaData'
      | 'GetAddress';
    /** @description Authentication token request. */
    'iikoTransport.PublicApi.Contracts.Auth.GetAccessTokenRequest': {
      /** @description API key. It is set in Syrve App. */
      apiLogin: string;
    };
    /** @description Response to authentication token request. */
    'iikoTransport.PublicApi.Contracts.Auth.GetAccessTokenResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Authentication token. The standard token lifetime is 1 hour. */
      token: string;
    };
    /** @description Delivery cancel cause. */
    'iikoTransport.PublicApi.Contracts.CancelCauses.CancelCause': {
      /**
       * Format: uuid
       * @description Identifier.
       */
      id: string;
      /** @description Name. */
      name: string;
      /** @description Is deleted sign. */
      isDeleted?: boolean;
    };
    /** @description Request for organization's delivery cancel causes. */
    'iikoTransport.PublicApi.Contracts.CancelCauses.CancelCausesRequest': {
      /**
       * @description Organizations ids which delivery cancel causes needs to be returned.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description Response with delivery cancel causes (reasons for deletion) list. */
    'iikoTransport.PublicApi.Contracts.CancelCauses.CancelCausesResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of delivery cancel causes. */
      cancelCauses: components['schemas']['iikoTransport.PublicApi.Contracts.CancelCauses.CancelCause'][];
    };
    /** @description Command completed with error. */
    'iikoTransport.PublicApi.Contracts.Commands.ErrorCommandStatus': {
      state: 'Error';
      /** @description Occured exception details. */
      exception?: Record<string, unknown> | null;
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse'],
      'state'
    >;
    /** @description Request for command status obtaining. */
    'iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusRequest': {
      /**
       * Format: uuid
       * @description Organization id which "correlationId" belongs to.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Operation ID obtained from any command supporting operations.
       */
      correlationId: string;
    };
    /** @description Class containing information about command status. */
    'iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse': {
      state: string;
    };
    /** @description Command is in progress. */
    'iikoTransport.PublicApi.Contracts.Commands.InProgressCommandStatus': {
      state: 'InProgress';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse'],
      'state'
    >;
    /** @description Command completed successfully. */
    'iikoTransport.PublicApi.Contracts.Commands.SuccessCommandStatus': {
      state: 'Success';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse'],
      'state'
    >;
    /** @description Wrapping object (external) for CorrelationId return. */
    'iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
    };
    /** @description External data key and value pair. */
    'iikoTransport.PublicApi.Contracts.Common.ExternalData': {
      /** @description External data key. */
      key: string;
      /** @description External data value. */
      value: string;
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Address.City, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Address.City'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Address.Region, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Address.Region'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Discounts.DiscountCardTypeInfo, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Discounts.DiscountCardTypeInfo'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocation, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocation'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.CourierLocations, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Employees.CourierLocations'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.Employee, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Employees.Employee'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.EmployeeWithCheckedRole, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Employees.EmployeeWithCheckedRole'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.OrderTypes.OrderType, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.OrderTypes.OrderType'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopList, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopList'][];
    };
    /** @description RMS pair wrapping - list of response items that belong to this RMS. */
    'iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Items for organization. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup'][];
    };
    /**
     * @description Sorting direction.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Common.SortDirection':
      | 'Ascending'
      | 'Descending';
    /** @description Cheque additional information according to russian federal law #54. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo': {
      /** @description Whether paper cheque should be printed. */
      needReceipt: boolean;
      /** @description Email to send cheque information or null if the cheque shouldn't be sent by email. */
      email?: string | null;
      /** @description Settlement place. */
      settlementPlace?: string | null;
      /** @description Phone to send cheque information (by sms) or null if the cheque shouldn't be sent by sms. */
      phone?: string | null;
    };
    /**
     * @description Delivery order statuses.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus':
      | 'Unconfirmed'
      | 'WaitCooking'
      | 'ReadyForCooking'
      | 'CookingStarted'
      | 'CookingCompleted'
      | 'Waiting'
      | 'OnWay'
      | 'Delivered'
      | 'Closed'
      | 'Cancelled';
    /**
     * @description Delivery order statuses for update requests.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatusForUpdate':
      | 'Waiting'
      | 'OnWay'
      | 'Delivered';
    /**
     * @description Sex.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.Gender':
      | 'NotSpecified'
      | 'Male'
      | 'Female';
    /** @description Additional data for LoyaltyApp payment item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.IikoCardPaymentAdditionalData': WithRequired<
      {
        type: 'IikoCard';
        /** @description Guest credential, authorizing payment. */
        credential: string;
        /** @description Guest credential search scope. */
        searchScope: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.IikoCardSearchScope'];
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData'],
        'type'
      >,
      'credential' | 'searchScope'
    >;
    /** @enum {string} */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.IikoCardSearchScope':
      | 'Reserved'
      | 'Phone'
      | 'CardNumber'
      | 'CardTrack'
      | 'PaymentToken'
      | 'FindFaceId';
    /**
     * @description Order type.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.OrderServiceType':
      | 'Common'
      | 'DeliveryByCourier'
      | 'DeliveryByClient';
    /** @description Additional payment data. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData': {
      type: string;
    };
    /**
     * @description Payment type kind.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentTypeKind':
      | 'Unknown'
      | 'Cash'
      | 'Card'
      | 'Credit'
      | 'Writeoff'
      | 'Voucher'
      | 'External'
      | 'SmartSale'
      | 'Sberbank'
      | 'Trpos';
    /** @description Request for add order items. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.AddOrderItemsRequest': {
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Order items (may include ProductOrderItem or CompoundOrderItem). */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'][];
      /**
       * @description Combos.
       *
       *  > Allowed from version `7.6.1`.
       */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo'][]
        | null;
    };
    /** @description Request for cancel the order. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CancelOrderRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /**
       * Format: uuid
       * @description Fill this field with id of the new order if current order has been moved to the new RMS/terminal group.
       */
      movedOrderId?: string | null;
      /**
       * Format: uuid
       * @description Cancel order dictionary item id.
       *
       *  > Allowed from version `7.7.1`.
       */
      cancelCauseId?: string | null;
      /**
       * Format: uuid
       * @description Removal type (for delete printed order items).
       *
       *  > Allowed from version `7.7.1`.
       */
      removalTypeId?: string | null;
      /**
       * Format: uuid
       * @description User for writeoff (for delete printed order items).
       *
       *  > Allowed from version `7.7.1`.
       */
      userIdForWriteoff?: string | null;
    };
    /** @description Request for close table order. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CloseDeliveryOrderRequest': {
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Actual delivery time. If empty local Syrve POS time will used.
       *
       *  > Allowed from version `8.0.6`.
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDate?: string | null;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
    };
    /** @description Request for close table order. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CloseTableOrderRequest': {
      /** @description Cheque additional information according to russian federal law #54. */
      chequeAdditionalInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo']
        | null;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
    };
    /** @description Order delivery address */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Address': {
      /** @description Street. */
      street: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Street'];
      /** @description Postcode. */
      index?: string | null;
      /**
       * @description House.
       * > In case useUaeAddressingSystem enabled max length - 100, otherwise - 10
       */
      house: string;
      /** @description Building. */
      building?: string | null;
      /**
       * @description Apartment.
       * > In case useUaeAddressingSystem enabled max length - 100, otherwise - 10
       */
      flat?: string | null;
      /** @description Entrance. */
      entrance?: string | null;
      /** @description Floor. */
      floor?: string | null;
      /** @description Intercom. */
      doorphone?: string | null;
      /**
       * Format: uuid
       * @description Delivery area ID.
       */
      regionId?: string | null;
    };
    /**
     * @description 'One-time' customer:
     * - should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details
     * - customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.AnonymousCustomer': WithRequired<
      {
        type: 'one-time';
        /** @description Customer name. */
        name: string;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer'],
        'type'
      >,
      'name'
    >;
    /** @description Bank card payment. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CardPayment': {
      paymentTypeKind: 'Card';
      /**
       * @description Card No.
       * > In Syrve POS, it is possible to make card payment without card No.
       */
      number?: string | null;
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'],
      'paymentTypeKind'
    >;
    /** @description Bank card tips payment. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CardTipsPayment': {
      paymentTypeKind: 'Card';
      /**
       * @description Card No.
       * > In Syrve POS, it is possible to make card payment without card No.
       */
      number?: string | null;
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment'],
      'paymentTypeKind'
    >;
    /**
     * @description Cash payment.
     * <remarks>
     * No additional fields for base class.
     * </remarks>
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CashPayment': {
      paymentTypeKind: 'Cash';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'],
      'paymentTypeKind'
    >;
    /**
     * @description Cash tips payment.
     * <remarks>
     * No additional fields for base class.
     * </remarks>
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CashTipsPayment': {
      paymentTypeKind: 'Cash';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment'],
      'paymentTypeKind'
    >;
    /** @description Combo in order. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo': {
      /**
       * Format: uuid
       * @description Combo ID.
       * MUST be unique for the whole system. Therefore it must be generated with Guid.NewGuid().
       */
      id: string;
      /** @description Name of combo. */
      name: string;
      /**
       * Format: int32
       * @description Quantity.
       */
      amount: number;
      /**
       * Format: double
       * @description Price of one combo.
       */
      price: number;
      /**
       * Format: uuid
       * @description Combo validity ID.
       */
      sourceId: string;
      /**
       * Format: uuid
       * @description Card program ID.
       *
       *  > Allowed from version `7.6.1`.
       */
      programId?: string;
      /**
       * Format: uuid
       * @description Size ID. Required if combo has a size scale.
       *
       *  > Allowed from version `8.5.6`.
       */
      sizeId?: string | null;
    };
    /** @description Combo details if order item belongs to combo */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ComboItemInformation': {
      /**
       * Format: uuid
       * @description Created combo ID.
       * Must be one of combos.id generated values.
       */
      comboId: string;
      /**
       * Format: uuid
       * @description Action ID that defines combo.
       */
      comboSourceId: string;
      /**
       * Format: uuid
       * @description Combo group ID to which item belongs.
       */
      comboGroupId: string;
    };
    /** @description Order item: composite item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItem': WithRequired<
      {
        type: 'Compound';
        /** @description Main component. */
        primaryComponent: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItemComponent'];
        /** @description Minor component. */
        secondaryComponent?:
          | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItemComponent']
          | null;
        /** @description Indivisible modifiers. */
        commonModifiers?:
          | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Modifier'][]
          | null;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'],
        'type'
      >,
      'primaryComponent'
    >;
    /** @description Item component */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItemComponent': {
      /**
       * Format: uuid
       * @description Item ID.
       */
      productId: string;
      /** @description Modifiers. */
      modifiers?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Modifier'][]
        | null;
      /**
       * Format: double
       * @description Price.
       */
      price?: number | null;
      /**
       * Format: uuid
       * @description Unique identifier of the item in the order.
       * MUST be unique for the whole system. Therefore it must be generated with Guid.NewGuid().
       * > If sent null, it generates automatically on Syrve Live side.
       */
      positionId?: string | null;
    };
    /** @description Delivery address coordinates. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Coordinates': {
      /**
       * Format: double
       * @description Latitude
       */
      latitude: number;
      /**
       * Format: double
       * @description Longitude
       */
      longitude: number;
    };
    /** @description Customer base info. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer': {
      type: string;
    };
    /** @description Delivery order. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryOrder': {
      /**
       * @description External menu ID.
       * @example null
       */
      menuId?: string | null;
      /**
       * Format: uuid
       * @description Order ID. Must be unique.
       * > If sent null, it generates automatically on Syrve Live side.
       */
      id?: string | null;
      /**
       * @description Order external number.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalNumber?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order fulfillment date.
       * > Date and time must be local for delivery terminal, without time zone (take a look at example).
       * > If null, order is urgent and time is calculated based on customer settings,
       * > i.e. the shortest delivery time possible.
       * > Permissible values: from current day and 60 days on.
       * @example 2019-08-24 14:15:22.123
       */
      completeBefore?: string | null;
      /**
       * @description Telephone number.
       * > Must begin with symbol "+" and must be at least 8 digits.
       */
      phone: string;
      /**
       * Format: uuid
       * @description Order type ID.
       *
       * Can be obtained by `/api/1/deliveries/order_types` operation.
       *
       * > Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.
       */
      orderTypeId?: string | null;
      /**
       * @description Order service type.
       * > Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.
       *
       *  > Allowed from version `7.0.3`.
       */
      orderServiceType?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType']
        | null;
      /**
       * @description Delivery point details.
       * > Not required in case of customer pickup. Otherwise, required.
       */
      deliveryPoint?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint']
        | null;
      /** @description Order comment. */
      comment?: string | null;
      /**
       * @description Customer.
       *
       * 'Regular' customer:
       *
       * - can be used only if a customer agrees to take part in the store's loyalty programs
       * - customer details will be added (updated) to the store's customer database
       * - benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer
       *
       * 'One-time' customer:
       *
       * - should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details
       * - customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order
       */
      customer?:
        | ({
            type: 'one-time' | 'regular';
            name: string;
          } & Omit<
            components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer'],
            'type'
          >)
        | null;
      /** @description Guest details. Not equal to the customer who makes an order. */
      guests?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Guests']
        | null;
      /**
       * Format: uuid
       * @description Marketing source (advertisement) ID.
       *
       * Can be obtained by `/api/1/marketing_sources` operation.
       */
      marketingSourceId?: string | null;
      /**
       * Format: uuid
       * @description Operator ID.
       *
       *  > Allowed from version `7.6.3`.
       */
      operatorId?: string | null;
      /** @description Order items. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'][];
      /** @description Combos included in order. */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo'][]
        | null;
      /**
       * @description Order payment components.
       *
       *  > Type **IikoCard** allowed from version `7.1.5`.
       */
      payments?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'][]
        | null;
      /** @description Order tips components. */
      tips?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment'][]
        | null;
      /** @description The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration. */
      sourceKey?: string | null;
      /** @description Discounts/surcharges. */
      discountsInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo']
        | null;
      /** @description Information about Loyalty app. */
      loyaltyInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo']
        | null;
      /** @description Cheque additional information. */
      chequeAdditionalInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo']
        | null;
      /**
       * @description Order external data.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData'][]
        | null;
    };
    /** @description Delivery location details. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint': {
      /**
       * @description Delivery address coordinates.
       * > Allowed from version `7.7.3`.
       */
      coordinates?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Coordinates']
        | null;
      /** @description Order delivery address. */
      address?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Address']
        | null;
      /** @description Delivery location custom code in customer's API system. */
      externalCartographyId?: string | null;
      /** @description Additional information. */
      comment?: string | null;
    };
    /** @description Discount/surcharge. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Discount': {
      type: string;
    };
    /** @description Discount card. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountCard': {
      /** @description Track of discount card to be applied to order. */
      track: string;
    };
    /**
     * @description Information on discounts/surcharges to be applied to order.
     * <remarks>
     * Whether map or non-blank list of discounts must be set.
     * </remarks>
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo': {
      /** @description Track of discount card to be applied to order. */
      card?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountCard']
        | null;
      /**
       * @description Discounts/surcharges.
       *
       *  > Type **iikoCard** allowed from version `7.4.4`.
       */
      discounts?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Discount'][]
        | null;
    };
    /** @description Order external data. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData': {
      /** @description Key. */
      key: string;
      /** @description Value. */
      value: string;
      /** @description Is this external data public (for RMS OLAP-reports). */
      isPublic?: boolean;
    };
    /** @description External payment type */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalPayment': {
      paymentTypeKind: 'External';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'],
      'paymentTypeKind'
    >;
    /** @description External tips payment type */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalTipsPayment': {
      paymentTypeKind: 'External';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment'],
      'paymentTypeKind'
    >;
    /** @description Information on guests. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Guests': {
      /**
       * Format: int32
       * @description Number of persons in order. This field defines the number of cutlery sets
       */
      count: number;
      /** @description Attribute that shows whether order must be split among guests. */
      splitBetweenPersons?: boolean | null;
    };
    /** @description Card discount/surcharge. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.IikoCardDiscount': WithRequired<
      {
        type: 'iikoCard';
        /**
         * Format: uuid
         * @description Card program ID.
         */
        programId: string;
        /** @description Card program name. */
        programName: string;
        /** @description Discount information for order items. */
        discountItems: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.IikoCardDiscountItem'][];
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Discount'],
        'type'
      >,
      'programId' | 'programName' | 'discountItems'
    >;
    /** @description Card discount/surcharge item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.IikoCardDiscountItem': {
      /**
       * Format: uuid
       * @description Position ID of order item.
       */
      positionId: string;
      /**
       * Format: double
       * @description Discount/surcharge sum.
       */
      sum: number;
      /**
       * Format: double
       * @description Amount.
       */
      amount: number;
    };
    /** @description Payment with Card loyalty system. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.IikoCardPayment': {
      paymentTypeKind: 'IikoCard';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'],
      'paymentTypeKind'
    >;
    /** @description Information about Loyalty app. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo': {
      /** @description Coupon No. that was considered when calculating loyalty program. */
      coupon?: string | null;
      /** @description Information about applied manual conditions. */
      applicableManualConditions?: string[] | null;
    };
    /** @description Modifier. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Modifier': {
      /**
       * Format: uuid
       * @description Modifier item ID.
       *
       * Can be obtained by `/api/1/nomenclature` operation.
       */
      productId: string;
      /**
       * Format: double
       * @description Quantity.
       */
      amount: number;
      /**
       * Format: uuid
       * @description Modifiers group ID (for group modifier). Required for a group modifier.
       *
       * Can be obtained by `/api/1/nomenclature` operation.
       */
      productGroupId?: string | null;
      /**
       * Format: double
       * @description Unit price.
       */
      price?: number | null;
      /**
       * Format: uuid
       * @description Unique identifier of the item in the order.
       * MUST be unique for the whole system. Therefore it must be generated with Guid.NewGuid().
       * > If sent null, it generates automatically on Syrve Live side.
       */
      positionId?: string | null;
    };
    /** @description Order. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Order': {
      /**
       * Format: uuid
       * @description Order ID. Must be unique.
       * > If sent null, it generates automatically on Syrve Live side.
       */
      id?: string | null;
      /**
       * @description Order external number.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalNumber?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order fulfillment date.
       * > Date and time must be local for delivery terminal, without time zone (take a look at example).
       * > If null, order is urgent and time is calculated based on customer settings,
       * > i.e. the shortest delivery time possible.
       * > Permissible values: from current day and 60 days on.
       * @example 2019-08-24 14:15:22.123
       */
      completeBefore?: string | null;
      /**
       * @description Telephone number.
       * > Must begin with symbol "+" and must be at least 8 digits.
       */
      phone: string;
      /**
       * Format: uuid
       * @description Order type ID.
       *
       * Can be obtained by `/api/1/deliveries/order_types` operation.
       *
       * > Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.
       */
      orderTypeId?: string | null;
      /**
       * @description Order service type.
       * > Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.
       *
       *  > Allowed from version `7.0.3`.
       */
      orderServiceType?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType']
        | null;
      /**
       * @description Delivery point details.
       * > Not required in case of customer pickup. Otherwise, required.
       */
      deliveryPoint?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint']
        | null;
      /** @description Order comment. */
      comment?: string | null;
      /**
       * @description Customer.
       *
       * 'Regular' customer:
       *
       * - can be used only if a customer agrees to take part in the store's loyalty programs
       * - customer details will be added (updated) to the store's customer database
       * - benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer
       *
       * 'One-time' customer:
       *
       * - should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details
       * - customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order
       */
      customer?:
        | ({
            type: 'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Order';
          } & Omit<
            components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer'],
            'type'
          >)
        | null;
      /** @description Guest details. Not equal to the customer who makes an order. */
      guests?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Guests']
        | null;
      /**
       * Format: uuid
       * @description Marketing source (advertisement) ID.
       *
       * Can be obtained by `/api/1/marketing_sources` operation.
       */
      marketingSourceId?: string | null;
      /**
       * Format: uuid
       * @description Operator ID.
       *
       *  > Allowed from version `7.6.3`.
       */
      operatorId?: string | null;
      /** @description Order items. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'][];
      /** @description Combos included in order. */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo'][]
        | null;
      /**
       * @description Order payment components.
       *
       *  > Type **IikoCard** allowed from version `7.1.5`.
       */
      payments?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'][]
        | null;
      /** @description Order tips components. */
      tips?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment'][]
        | null;
      /** @description The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration. */
      sourceKey?: string | null;
      /** @description Discounts/surcharges. */
      discountsInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo']
        | null;
      /** @description Information about Loyalty app. */
      loyaltyInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo']
        | null;
      /** @description Cheque additional information. */
      chequeAdditionalInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo']
        | null;
      /**
       * @description Order external data.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData'][]
        | null;
    };
    /** @description Order item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem': {
      productId: string;
      price: number;
      type: string;
      /**
       * Format: double
       * @description Quantity.
       */
      amount: number;
      /**
       * Format: uuid
       * @description Size ID. Required if a stock list item has a size scale.
       */
      productSizeId?: string | null;
      /** @description Combo details if combo includes order item. */
      comboInformation?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ComboItemInformation']
        | null;
      /** @description Comment. */
      comment?: string | null;
    };
    /**
     * @description Order type.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType':
      | 'DeliveryByCourier'
      | 'DeliveryByClient';
    /** @description Base class of delivery order payment item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment': {
      paymentTypeKind: string;
      /**
       * Format: double
       * @description Amount due.
       */
      sum: number;
      /**
       * Format: uuid
       * @description Payment type.
       *
       * Can be obtained by `/api/1/payment_types` operation.
       */
      paymentTypeId: string;
      /** @description Whether payment item is processed by external payment system (made from outside). */
      isProcessedExternally?: boolean;
      /** @description Additional payment parameters. */
      paymentAdditionalData?:
        | ({
            type: 'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment';
          } & Omit<
            components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData'],
            'type'
          >)
        | null;
      /**
       * @description Whether the payment item is externally fiscalized.
       *
       *  > Allowed from version `7.6.3`.
       */
      isFiscalizedExternally?: boolean;
      /**
       * @description Whether the payment item is prepay. Unavailable for `paymentKindType.IikoCard`.
       *
       *  > Allowed from version `8.2.6`.
       */
      isPrepay?: boolean;
    };
    /** @description Order item: item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ProductOrderItem': WithRequired<
      {
        type: 'Product';
        /**
         * Format: uuid
         * @description ID of menu item.
         *
         * Can be obtained by `/api/1/nomenclature` operation.
         */
        productId: string;
        /** @description Modifiers. */
        modifiers?:
          | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Modifier'][]
          | null;
        /**
         * Format: double
         * @description Price per item unit. Can be sent different from the price in the base menu.
         */
        price: number;
        /**
         * Format: uuid
         * @description Unique identifier of the item in the order.
         * MUST be unique for the whole system. Therefore it must be generated with Guid.NewGuid().
         * > If sent null, it generates automatically on Syrve Live side.
         */
        positionId?: string | null;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'],
        'type'
      >,
      'productId' | 'price'
    >;
    /**
     * @description 'Regular' customer:
     * - can be used only if a customer agrees to take part in the store's loyalty programs
     * - customer details will be added (updated) to the store's customer database
     * - benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RegularCustomer': {
      type: 'regular';
      /**
       * Format: uuid
       * @description Existing customer ID in RMS.
       * > If null - the phone number is searched in database, otherwise the new customer is created in RMS.
       */
      id?: string | null;
      /**
       * @description Name of customer.
       * > Required for new customers (i.e. if "id" == null)
       * > Not required if "id" specified.
       */
      name?: string | null;
      /** @description Last name. */
      surname?: string | null;
      /** @description Comment. */
      comment?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Date of birth.
       * @example 2019-08-24 14:15:22.123
       */
      birthdate?: string | null;
      /** @description Email. */
      email?: string | null;
      /**
       * @deprecated
       * @description Deprecated, use "shouldReceiveOrderStatusNotifications" instead.
       */
      shouldReceivePromoActionsInfo?: boolean | null;
      /** @description Whether customer receives order status notification messages. */
      shouldReceiveOrderStatusNotifications?: boolean | null;
      /** @description Gender. */
      gender?: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.Gender'];
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer'],
      'type'
    >;
    /**
     * @description RMS discount/surcharge.
     * <remarks>
     * Amount must be specified only if discount has "assign amount" setting enabled.
     * In any other case, amount must not be specified.
     * </remarks>
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RmsDiscount': WithRequired<
      {
        type: 'RMS';
        /**
         * Format: uuid
         * @description Discount type.
         *
         * Can be obtained by `/api/1/discounts` operation.
         */
        discountTypeId: string;
        /**
         * Format: double
         * @description Discount/surcharge sum.
         */
        sum?: number;
        /** @description Order item positions. */
        selectivePositions?: string[] | null;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Discount'],
        'type'
      >,
      'discountTypeId'
    >;
    /** @description Street. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Street': {
      /**
       * @deprecated
       * @description Deprecated, do not use.
       */
      classifierId?: string | null;
      /**
       * Format: uuid
       * @description ID.
       *
       * Can be obtained by `/api/1/streets/by_city` operation.
       */
      id?: string | null;
      /** @description Name. */
      name?: string | null;
      /** @description City name. */
      city?: string | null;
    };
    /** @description Base class of delivery order payment item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment': {
      paymentTypeKind: string;
      /**
       * Format: uuid
       * @description Tips type ID.
       *
       * Can be obtained by `/api/1/tips_types` operation.
       */
      tipsTypeId?: string;
      /**
       * Format: double
       * @description Amount due.
       */
      sum: number;
      /**
       * Format: uuid
       * @description Payment type.
       *
       * Can be obtained by `/api/1/payment_types` operation.
       */
      paymentTypeId: string;
      /** @description Whether payment item is processed by external payment system (made from outside). */
      isProcessedExternally?: boolean;
      /** @description Additional payment parameters. */
      paymentAdditionalData?:
        | ({
            type: 'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment';
          } & Omit<
            components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData'],
            'type'
          >)
        | null;
      /**
       * @description Whether the payment item is externally fiscalized.
       *
       *  > Allowed from version `7.6.3`.
       */
      isFiscalizedExternally?: boolean;
      /**
       * @description Whether the payment item is prepay. Unavailable for `paymentKindType.IikoCard`.
       *
       *  > Allowed from version `8.2.6`.
       */
      isPrepay?: boolean;
    };
    /** @description Order creation model. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrderRequest': {
      /**
       * Format: uuid
       * @description Organization ID of the new order.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Front group ID the order must be sent to.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId?: string | null;
      /** @description Order creation parameters. */
      createOrderSettings?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettings']
        | null;
      /** @description Order. */
      order: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryOrder'];
    };
    /** @description Request for information about orders from external source and based on additional filters. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndFilterRequest': {
      /**
       * @description Organization ID for which an order search will be performed.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /** @description List of terminal groups IDs. */
      terminalGroupIds?: string[] | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order delivery date (Local for delivery terminal). Lower limit.
       *
       * Order details are stored for 90 days.
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDateFrom?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order delivery date (Local for delivery terminal). Upper limit.
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDateTo?: string | null;
      /** @description Allowed order statuses. */
      statuses?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus'][]
        | null;
      /**
       * @description If true, delivery has a problem.
       * > Conditions under which the order has a problem:
       * > * order.problem.hasProblem is true;
       * > * order status is Unconfirmed and CookingStartTime before now;
       * > * order status is ReadyForCooking and (CookingStartTime + timeToCookingErrorTimeout) before now;
       * > * order status is CookingCompleted or Waiting and (CookingStartTime + cookingTimeout) before now.
       */
      hasProblem?: boolean | null;
      /** @description Order service type. */
      orderServiceType?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType']
        | null;
      /** @description Value for search. Used for prefix search. */
      searchText?: string | null;
      /**
       * Format: int32
       * @description Error timeout for status time to cooking, in seconds.
       */
      timeToCookingErrorTimeout?: number;
      /**
       * Format: int32
       * @description Expected cooking time, in seconds.
       */
      cookingTimeout?: number;
      /** @description Sorting property. */
      sortProperty?: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.OrderSortProperty'];
      /** @description Sorting direction. */
      sortDirection?: components['schemas']['iikoTransport.PublicApi.Contracts.Common.SortDirection'];
      /**
       * Format: int32
       * @description Maximum number of items returned.
       */
      rowsCount?: number;
      /** @description Source keys. */
      sourceKeys?: string[] | null;
      /**
       * @description Order IDs.
       *
       * > Must be null if "posOrderIds" is not null.
       */
      orderIds?: string[] | null;
      /**
       * @description POS order IDs.
       *
       * > Must be null if "orderIds" is not null.
       */
      posOrderIds?: string[] | null;
    };
    /** @description Request for a list of orders by phone number. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndPhoneRequest': {
      /** @description Delivery order phone number. */
      phone: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order delivery date (Local for delivery terminal). Lower limit.
       *
       * Order details are stored for 90 days.
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDateFrom?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order delivery date (Local for delivery terminal). Upper limit.
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDateTo?: string | null;
      /**
       * @description Organization ID for which an order search will be performed.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /**
       * Format: int64
       * @description Revision start number beginning from which (but not including) new/edited orders will be returned.
       */
      startRevision?: number | null;
      /** @description Source keys. */
      sourceKeys?: string[] | null;
      /**
       * Format: int32
       * @description Maximum number of items returned.
       * <remarks>
       * If null, all items will be returned.
       * </remarks>
       */
      rowsCount?: number | null;
    };
    /** @description Request for information about orders. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndStatusRequest': {
      /**
       * @description Organization ID for which an order search will be performed.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order delivery date (Local for delivery terminal). Lower limit.
       *
       * Order details are stored for 90 days.
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDateFrom: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order delivery date (Local for delivery terminal). Upper limit.
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDateTo?: string | null;
      /** @description Allowed order statuses. */
      statuses?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus'][]
        | null;
      /** @description Source keys. */
      sourceKeys?: string[] | null;
      /** @description List of driver IDs. */
      courierIds?: string[] | null;
    };
    /** @description Request for information about orders using IDs. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByIdRequest': {
      /**
       * Format: uuid
       * @description Organization ID for which an order search will be performed.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * @description IDs of orders information on which is required.
       *
       * > Required if "posOrderIds" is null. Must be null if "posOrderIds" is not null.
       */
      orderIds?: string[] | null;
      /** @description Source keys. */
      sourceKeys?: string[] | null;
      /**
       * @description POS order IDs information on which is required.
       *
       * > Required if "orderIds" is null. Must be null if "orderIds" is not null.
       */
      posOrderIds?: string[] | null;
      /** @description Keys for retrun external data information. */
      returnExternalDataKeys?: string[] | null;
    };
    /** @description Request for a list of edited orders starting from specified revision number. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByRevisionRequest': {
      /**
       * Format: int64
       * @description Revision start number beginning from which (but not including) new/edited orders will be returned.
       */
      startRevision: number;
      /**
       * @description Organization ID for which an order search will be performed.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /** @description Source keys. */
      sourceKeys?: string[] | null;
    };
    /**
     * @description Order sorting property.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.OrderSortProperty':
      | 'Number'
      | 'CompleteBefore'
      | 'Sum'
      | 'Customer'
      | 'Courier'
      | 'Status'
      | 'OrderTypeName';
    /** @description Request to print delivery bill. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.PrintDeliveryBillRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
    };
    /** @description Request for delivery status update. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateDeliveryStatusRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description Delivery status. Can be only switched between these three statuses. */
      deliveryStatus: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatusForUpdate'];
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description The date and time when the order was received by the guest (Local for delivery terminal).
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDate?: string | null;
    };
    /** @description Request for cancel delivery confirmation. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.CancelDeliveryConfirmationRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
    };
    /** @description Request for change time when client wants the order to be delivered. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeCompleteBeforeRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description New time when client wants the order to be delivered (Local for delivery terminal).
       * @example 2019-08-24 14:15:22.123
       */
      newCompleteBefore: string;
    };
    /** @description Request for change delivery comment. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryCommentRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description New delivery comment. */
      comment: string;
    };
    /** @description Request for assign/change the order operator. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryOperatorRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /**
       * Format: uuid
       * @description Operator to assign the order to.
       */
      operatorId: string;
    };
    /** @description Request for change order's delivery point information. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryPointRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description New address of delivery. */
      newDeliveryPoint: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint'];
    };
    /** @description Change order's payments request. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangePaymentsRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description Order payments. */
      payments: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'][];
      /** @description Order tips. */
      tips?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment'][]
        | null;
    };
    /** @description Change order's delivery type to DeliveryByClient. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeDeliveryByClient': {
      newServiceType: 'DeliveryByClient';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeRequest'],
      'newServiceType'
    >;
    /** @description Change order's delivery type to DeliveryByCourier. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeDeliveryByCourier': WithRequired<
      {
        newServiceType: 'DeliveryByCourier';
        /** @description Address of delivery. */
        deliveryPoint: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint'];
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeRequest'],
        'newServiceType'
      >,
      'deliveryPoint'
    >;
    /** @description Request for change order's delivery type. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeRequest': {
      newServiceType: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
    };
    /** @description Request for confirm delivery. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ConfirmDeliveryRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
    };
    /** @description Payments details. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.OrderPaymentItem': {
      /**
       * Format: double
       * @description Amount due
       */
      sum: number;
      /**
       * Format: uuid
       * @description Payment type ID.
       */
      paymentTypeId: string;
      /** @description Payment item is processed by external payment system. */
      isProcessedExternally: boolean;
    };
    /** @description Request for order courier update. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderCourierRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /**
       * Format: uuid
       * @description Courier ID.
       *
       * Can be obtained by `/api/1/employees/couriers` operation.
       */
      employeeId: string;
    };
    /** @description Request for order payment update. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderPaymentsRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description Payment details. */
      paymentItems?: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.OrderPaymentItem'][];
    };
    /** @description Request for order problem update. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderProblemRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description Problem flag. */
      hasProblem: boolean;
      /** @description Problem text. */
      problem: string | null;
    };
    /** @description Wrapping object (external) for a delivery check create order return. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.CheckCreateOrderResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Order check creation error details. */
      errorInfo:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorInfo']
        | null;
    };
    /** @description Address details. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Address': {
      /** @description Street. */
      street: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Street'];
      /** @description Postcode. */
      index?: string | null;
      /** @description House. */
      house: string;
      /** @description Building. */
      building?: string | null;
      /** @description Apartment. */
      flat?: string | null;
      /** @description Entrance. */
      entrance?: string | null;
      /** @description Floor. */
      floor?: string | null;
      /** @description Intercom. */
      doorphone?: string | null;
      /** @description Region */
      region:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Region']
        | null;
    };
    /**
     * @description 'One-time' customer:
     * - should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details
     * - customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.AnonymousCustomer': WithRequired<
      {
        type: 'one-time';
        /** @description Customer name. */
        name: string;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer'],
        'type'
      >,
      'name'
    >;
    /** @description Delivery cancellation reason. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CancelCause': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Description. */
      name: string;
    };
    /** @description Order cancellation details */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CancelInfo': {
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Cancellation time (Local for delivery terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenCancelled: string;
      /** @description Delivery cancellation reason. */
      cause: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CancelCause'];
      /** @description Delivery cancellation comment. */
      comment?: string | null;
    };
    /** @description City. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.City': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Information on order item to combo relation. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ComboItemInformation': {
      /**
       * Format: uuid
       * @description New combo ID.
       */
      comboId: string;
      /**
       * Format: uuid
       * @description Action ID that defines combo.
       */
      comboSourceId: string;
      /**
       * Format: uuid
       * @description Combo group ID to which item belongs.
       */
      groupId: string;
    };
    /** @description Modifier scheme information. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundItemTemplate': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Order item: composite item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItem': WithRequired<
      {
        type: 'Compound';
        /** @description Main component. */
        primaryComponent: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItemComponent'];
        /** @description Additional component. */
        secondaryComponent?:
          | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItemComponent']
          | null;
        /** @description Indivisible modifiers. */
        commonModifiers?:
          | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemModifier'][]
          | null;
        /** @description Modifier scheme. */
        template?:
          | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundItemTemplate']
          | null;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem'],
        'type'
      >,
      'primaryComponent'
    >;
    /** @description Part of composite item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItemComponent': {
      /** @description Item. */
      product: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product'];
      /** @description Modifiers. */
      modifiers?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemModifier'][]
        | null;
      /**
       * Format: double
       * @description Price per item unit. Can be sent different from the price in the base menu.
       */
      price: number;
      /**
       * Format: double
       * @description Item total including tax, discounts/surcharges.
       */
      cost: number;
      /** @description Whether price is predefined. */
      pricePredefined: boolean;
      /**
       * Format: uuid
       * @description Unique identifier of the item in the order and for the whole system.
       */
      positionId?: string | null;
      /**
       * Format: double
       * @description Tax rate.
       */
      taxPercent?: number | null;
    };
    /** @description Concept. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Conception': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
      /** @description Code. */
      code: string;
    };
    /** @description Coordinate details. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Coordinates': {
      /**
       * Format: double
       * @description Latitude
       */
      latitude: number;
      /**
       * Format: double
       * @description Longitude
       */
      longitude: number;
    };
    /** @description Driver information. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CourierInfo': {
      /** @description Order driver. */
      courier: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Employee'];
      /** @description Whether driver is selected manually. */
      isCourierSelectedManually: boolean;
    };
    /**
     * @description Order creation status.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CreationStatus':
      | 'Success'
      | 'InProgress'
      | 'Error';
    /** @description Delivery customer. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer': {
      type: string;
    };
    /** @description Deletion method. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DeletionMethod': {
      /** @description ID. */
      id: string;
      /** @description Comment. */
      comment?: string | null;
      /** @description Write-off type. */
      removalType: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RemovalType'];
    };
    /** @description Delivery address coordinates. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DeliveryPoint': {
      /** @description Delivery address coordinates. */
      coordinates?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Coordinates']
        | null;
      /** @description Delivery address details. */
      address?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Address']
        | null;
      /** @description Address ID in external mapping system. */
      externalCartographyId?: string | null;
      /** @description Comment. */
      comment?: string | null;
    };
    /** @description Discount. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountItem': {
      /**
       * @description Discount type.
       *
       * Can be obtained by `/api/1/discounts` operation.
       */
      discountType: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountType'];
      /**
       * Format: double
       * @description Total.
       */
      sum: number;
      /** @description Order item positions. */
      selectivePositions?: string[] | null;
      /**
       * @description Order item positions with position discount sum.
       *
       *  > Allowed from version `8.5.6`.
       */
      selectivePositionsWithSum?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PositionWithSum'][]
        | null;
    };
    /** @description Discount type. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountType': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Employee. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Employee': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
      /** @description Phone. */
      phone?: string | null;
    };
    /** @description ECS info (external courier service). */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalCourierService': {
      /**
       * Format: uuid
       * @description ECS setting record id. Unique through all organizations.
       */
      id: string;
      /** @description ECS name. */
      name: string;
    };
    /** @description Order external data. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalData': {
      /** @description Key. */
      key: string;
      /** @description Public. */
      value: string;
    };
    /** @description Information about order guests. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.GuestsInfo': {
      /**
       * Format: int32
       * @description Number of persons.
       */
      count: number;
      /** @description Attribute that shows whether order must be split among guests. */
      splitBetweenPersons: boolean;
    };
    /** @description Order cancellation details. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ItemDeletedInfo': {
      /** @description Deletion method. */
      deletionMethod: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DeletionMethod'];
    };
    /** @description Information about Loyalty app. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.LoyaltyInfo': {
      /** @description Coupon No. that was considered when calculating loyalty program. */
      coupon?: string | null;
      /** @description Information about applied manual conditions. */
      appliedManualConditions?: string[] | null;
    };
    /** @description Marketing source. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.MarketingSource': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Order details. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Order': {
      /**
       * Format: uuid
       * @description ID of delivery serving as source for splitting by FCRs.
       */
      parentDeliveryId?: string | null;
      /** @description Delivery customer. */
      customer?:
        | ({
            type: 'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Order';
          } & Omit<
            components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer'],
            'type'
          >)
        | null;
      /** @description Delivery phone number. */
      phone: string;
      /**
       * @description Delivery point details.
       * <remarks>
       * Not required if order type is customer pickup. Otherwise, required.
       * </remarks>
       */
      deliveryPoint?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DeliveryPoint']
        | null;
      /** @description Delivery status. */
      status: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus'];
      /**
       * @description Delivery cancellation details.
       * <remarks>
       * Required only if delivery is canceled, i.e. status=Canceled.
       * </remarks>
       */
      cancelInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CancelInfo']
        | null;
      /** @description Driver information. */
      courierInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CourierInfo']
        | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order fulfillment time (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      completeBefore: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Delivery creation time in Syrve POS (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenCreated: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Delivery confirmation time (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenConfirmed?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Service printing time (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenPrinted?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Cooking completion time (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenCookingCompleted?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Delivery dispatch time (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenSended?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Actual delivery time (Local for delivery terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenDelivered?: string | null;
      /** @description Order comment. */
      comment?: string | null;
      /** @description Problem flag. */
      problem?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Problem']
        | null;
      /** @description Operator that took order. */
      operator?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Employee']
        | null;
      /** @description Marketing source. */
      marketingSource?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.MarketingSource']
        | null;
      /**
       * Format: int64
       * @description Duration of delivery (in minutes).
       */
      deliveryDuration?: number | null;
      /**
       * Format: int32
       * @description Ordinal number in route list.
       * <remarks>
       * Field is filled up at the time of delivery allocation by logistics in Syrve POS.
       * If logistics is not in use, the field is not filled up.
       * </remarks>
       */
      indexInCourierRoute?: number | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description The time when you need to start cooking an order (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      cookingStartTime: string;
      /**
       * @deprecated
       * @description Order is deleted.
       */
      isDeleted?: boolean | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @deprecated
       * @description Moment of time when CloudAPI received the request to create the order (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      whenReceivedByApi?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @deprecated
       * @description Moment of time when the order first received and saved from Syrve POS (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      whenReceivedFromFront?: string | null;
      /**
       * Format: uuid
       * @description Tells that this delivery has been moved from terminal group
       * with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.
       *
       *  > Allowed from version `7.5.4`.
       */
      movedFromDeliveryId?: string | null;
      /**
       * Format: uuid
       * @description Tells that this delivery has been moved from terminal group
       * with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.
       *
       *  > Allowed from version `7.5.4`.
       */
      movedFromTerminalGroupId?: string | null;
      /**
       * Format: uuid
       * @description Tells that this delivery has been moved from terminal group
       * with id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.
       *
       *  > Allowed from version `7.5.4`.
       */
      movedFromOrganizationId?: string | null;
      /**
       * @description ECS info.
       *
       *  > Allowed from version `7.7.7`.
       */
      externalCourierService?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalCourierService']
        | null;
      /**
       * Format: uuid
       * @description Tells that this delivery has been canceled and moved to terminal group
       * with id *MovedToTerminalGroupId*.
       */
      movedToDeliveryId?: string | null;
      /** Format: uuid */
      movedToTerminalGroupId?: string | null;
      /** Format: uuid */
      movedToOrganizationId?: string | null;
      /** @description External menu ID. */
      menuId?: string | null;
      /**
       * Format: double
       * @description Order amount (after discount or surcharge).
       */
      sum: number;
      /**
       * Format: int32
       * @description Delivery No.
       */
      number: number;
      /** @description Delivery source. */
      sourceKey?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Invoice printing time (guest bill time).
       * @example 2019-08-24 14:15:22.123
       */
      whenBillPrinted?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Delivery closing time (Local for delivery terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenClosed?: string | null;
      /** @description Concept. */
      conception?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Conception']
        | null;
      /** @description Information about order guests. */
      guestsInfo:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.GuestsInfo']
        | null;
      /** @description Order items. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem'][];
      /** @description Combo. */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderCombo'][]
        | null;
      /** @description Payments. */
      payments?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentItem'][]
        | null;
      /** @description Tips. */
      tips?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsPaymentItem'][]
        | null;
      /** @description Discounts. */
      discounts?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountItem'][]
        | null;
      /** @description Order type. */
      orderType:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderType']
        | null;
      /**
       * Format: uuid
       * @description ID of the terminal group where the order is located.
       */
      terminalGroupId: string;
      /**
       * Format: double
       * @description The amount of processed payments.
       * <remarks>
       * null - only for unsupported POS versions.
       * </remarks>
       *
       *  > Allowed from version `7.6.0`.
       */
      processedPaymentsSum: number | null;
      /**
       * @description Information about Loyalty app.
       * <remarks>
       * null - only for unsupported POS versions.
       * </remarks>
       */
      loyaltyInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.LoyaltyInfo']
        | null;
      /**
       * @description Order external data.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalData'][]
        | null;
    };
    /** @description Combo in order. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderCombo': {
      /**
       * Format: uuid
       * @description Combo ID.
       */
      id: string;
      /** @description Name of combo. */
      name: string;
      /**
       * Format: int32
       * @description Number of combos.
       */
      amount: number;
      /**
       * Format: double
       * @description Price of combo. Given for 1 combo, without regard to amount.
       */
      price: number;
      /**
       * Format: uuid
       * @description Combo action ID.
       */
      sourceId: string;
      /** @description Size. */
      size?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductSize']
        | null;
    };
    /** @description Order. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo': {
      /**
       * Format: uuid
       * @description Delivery order ID.
       */
      id: string;
      /**
       * Format: uuid
       * @description POS delivery order ID.
       */
      posId?: string | null;
      /** @description Order external number. */
      externalNumber?: string | null;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: int64
       * @description Timestamp of most recent order change that took place on Syrve Live server.
       */
      timestamp: number;
      /** @description Order creation status. In case of asynchronous creation, it allows to track the instance an order was validated/created in Syrve POS. */
      creationStatus: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CreationStatus'];
      /**
       * @description Order creation error details.
       * > Required only if "creationStatus"="Error".
       */
      errorInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorInfo']
        | null;
      /**
       * @description Order creation details.
       * > Field is filled up if "creationStatus"="Success".
       */
      order?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Order']
        | null;
    };
    /** @description Order item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem': {
      type: string;
      /** @description Item cooking status. */
      status: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemStatus'];
      /** @description Item deletion details. If filled up, item is deleted. */
      deleted?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ItemDeletedInfo']
        | null;
      /**
       * Format: double
       * @description Quantity.
       */
      amount: number;
      /** @description Comment. */
      comment?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Printing time (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenPrinted?: string | null;
      /** @description Size. */
      size?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductSize']
        | null;
      /** @description Combo details, if order item is part of combo. */
      comboInformation?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ComboItemInformation']
        | null;
    };
    /** @description Order item modifier. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemModifier': {
      /** @description Item. */
      product: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product'];
      /**
       * Format: double
       * @description Quantity.
       */
      amount: number;
      /** @description Whether quantity of modifier depends on quantity of item. */
      amountIndependentOfParentAmount: boolean;
      /** @description Group of modifiers (in case of a group modifier). */
      productGroup?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductGroup']
        | null;
      /**
       * Format: double
       * @description Price per item unit. Can be sent different from the price in RMS.
       */
      price: number;
      /** @description Whether price is predefined. */
      pricePredefined: boolean;
      /**
       * Format: double
       * @description Total amount per item including tax, discounts/surcharges.
       */
      resultSum: number;
      /** @description Item deletion details. If specified, the item is deleted. */
      deleted?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ItemDeletedInfo']
        | null;
      /**
       * Format: uuid
       * @description Unique identifier of the item in the order and for the whole system.
       */
      positionId?: string | null;
      /**
       * Format: int32
       * @description Default amount.
       */
      defaultAmount?: number | null;
      /** @description Hide modifier in UI if "amount" equals "defaultAmount". */
      hideIfDefaultAmount?: boolean | null;
      /**
       * Format: double
       * @description Tax rate.
       */
      taxPercent?: number | null;
    };
    /**
     * @description Order item status.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemStatus':
      | 'Added'
      | 'PrintedNotCooking'
      | 'CookingStarted'
      | 'CookingCompleted'
      | 'Served';
    /**
     * @description Describes the status of an order.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderStatus':
      | 'New'
      | 'Bill'
      | 'Closed'
      | 'Deleted';
    /** @description Order type. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderType': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
      /** @description Order type. */
      orderServiceType: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.OrderServiceType'];
    };
    /** @description Delivery order payment component. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentItem': {
      /**
       * @description Payment type.
       *
       * Can be obtained by `/api/1/payment_types` operation.
       */
      paymentType: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentType'];
      /**
       * Format: double
       * @description Amount due.
       */
      sum: number;
      /** @description Whether payment item is preliminary. */
      isPreliminary: boolean;
      /** @description Payment item is external (created via biz.API). */
      isExternal: boolean;
      /** @description Payment item is processed by external payment system. */
      isProcessedExternally: boolean;
      /**
       * @description Whether the payment item is externally fiscalized.
       *
       *  > Allowed from version `7.6.3`.
       */
      isFiscalizedExternally?: boolean;
      /**
       * @description Whether the payment item is prepay.
       *
       *  > Allowed from version `7.7.6`.
       */
      isPrepay: boolean;
    };
    /**
     * @description Payment type.
     *
     * Can be obtained by `/api/1/payment_types` operation.
     */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentType': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
      /** @description Payment type classifier. */
      kind: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentTypeKind'];
    };
    /** @description Order item positions with position discount sum. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PositionWithSum': {
      /**
       * Format: uuid
       * @description Order item position ID.
       */
      positionId: string;
      /**
       * Format: double
       * @description Position discount sum.
       */
      sum: number;
    };
    /** @description Order problem details. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Problem': {
      /** @description Has problem. */
      hasProblem: boolean;
      /** @description Problem description. */
      description?: string | null;
    };
    /** @description Item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Item category. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductGroup': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Order item: item. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductOrderItem': WithRequired<
      {
        type: 'Product';
        /** @description Item. */
        product: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product'];
        /** @description Modifiers. */
        modifiers?:
          | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemModifier'][]
          | null;
        /**
         * Format: double
         * @description Price per item unit. Can be sent different from the price in the base menu.
         */
        price: number;
        /**
         * Format: double
         * @description Total cost per item without tax, discounts/surcharges.
         */
        cost: number;
        /** @description Whether price is predefined. */
        pricePredefined: boolean;
        /**
         * Format: uuid
         * @description Unique identifier of the item in the order and for the whole system.
         */
        positionId?: string | null;
        /**
         * Format: double
         * @description Tax rate.
         */
        taxPercent?: number | null;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem'],
        'type'
      >,
      'product' | 'price' | 'cost' | 'pricePredefined'
    >;
    /** @description Item size. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductSize': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Delivery district (part of delivery address). */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Region': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RegularCustomer': WithRequired<
      {
        type: 'regular';
        /**
         * Format: uuid
         * @description Customer ID.
         */
        id: string;
        /** @description Name. */
        name: string;
        /** @description Last name. */
        surname?: string | null;
        /** @description Comment. */
        comment?: string | null;
        /** @description Sex. */
        gender?: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.Gender'];
        /** @description Is client in blacklist. */
        inBlacklist?: boolean;
        /** @description Reason why client was added to blacklist. */
        blacklistReason?: string | null;
        /**
         * Format: yyyy-MM-dd HH:mm:ss.fff
         * @description Date of birth.
         *
         *  > Allowed from version `7.6.1`.
         * @example 2019-08-24 14:15:22.123
         */
        birthdate?: string | null;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer'],
        'type'
      >,
      'id' | 'name'
    >;
    /** @description Write-off type. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RemovalType': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Order item: service. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ServiceOrderItem': WithRequired<
      {
        type: 'Service';
        /** @description Item. */
        service: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product'];
        /**
         * Format: double
         * @description Total cost per item without tax, discounts/surcharges.
         */
        cost: number;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem'],
        'type'
      >,
      'service' | 'cost'
    >;
    /** @description Street. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Street': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description Name. */
      name: string;
      /** @description City. */
      city: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.City'];
    };
    /** @description Delivery order tips payment component. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsPaymentItem': {
      /** @description Tips type. */
      tipsType?: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsType'];
      /**
       * @description Payment type.
       *
       * Can be obtained by `/api/1/payment_types` operation.
       */
      paymentType: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentType'];
      /**
       * Format: double
       * @description Amount due.
       */
      sum: number;
      /** @description Whether payment item is preliminary. */
      isPreliminary: boolean;
      /** @description Payment item is external (created via biz.API). */
      isExternal: boolean;
      /** @description Payment item is processed by external payment system. */
      isProcessedExternally: boolean;
      /**
       * @description Whether the payment item is externally fiscalized.
       *
       *  > Allowed from version `7.6.3`.
       */
      isFiscalizedExternally?: boolean;
      /**
       * @description Whether the payment item is prepay.
       *
       *  > Allowed from version `7.7.6`.
       */
      isPrepay: boolean;
    };
    /** @description The tips type. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsType': {
      /**
       * Format: uuid
       * @description Tips type ID.
       *
       * Can be obtained by `/api/1/tips_types` operation.
       */
      id: string;
      /** @description Tips type name. */
      name: string;
    };
    /** @description Wrapping object (external) for a delivery order return. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.OrderResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Delivery order. */
      orderInfo: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo'];
    };
    /** @description Orders grouped by organization. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersByOrganization': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description List of orders by organization. */
      orders: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo'][];
    };
    /** @description Wrapping object (external) for return of delivery orders. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersResponse': {
      /** Format: uuid */
      correlationId: string;
      /** @description Orders. */
      orders: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo'][];
    };
    /** @description Wrapping object (external) for return of delivery orders. */
    'iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /**
       * Format: int64
       * @description Maximum revision value per all orders.
       */
      maxRevision: number;
      /** @description Orders. */
      ordersByOrganizations: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersByOrganization'][];
    };
    /**
     * Format: int32
     * @description Actions on problems with auto-assignment.
     * @enum {integer}
     */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.ActionOnValidationRejection':
      | 1
      | 2;
    /** @description Suitable terminal group with delivery duration and other parameters. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.AllowedItemWithDuration': {
      /**
       * Format: uuid
       * @description Terminal group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: int64
       * @description Delivery duration in minutes.
       */
      deliveryDurationInMinutes: number;
      /** @description Delivery zone name which this TerminalGroupId belongs to. */
      zone: string | null;
      /**
       * Format: uuid
       * @description Link to "delivery service payment".
       */
      deliveryServiceProductId: string | null;
    };
    /**
     * @description Delivery restrictions reject cause code.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.DeliveryRestrictionRejectCode':
      | 'Undefined'
      | 'SumIsLessThenMinimum'
      | 'DayOfWeekIsUnacceptable'
      | 'DeliveryTimeIsUnacceptable'
      | 'OutOfTerminalZone';
    /** @description Request to identify suitable terminal groups. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.GetAllowedRestrictionsRequest': {
      /**
       * Format: uuid
       * @deprecated
       * @description Organization ID. Deprecated, use "organizationIds".
       */
      organizationId?: string | null;
      /**
       * @description Organization IDs.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds?: string[];
      /** @description Delivery address. */
      deliveryAddress?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsAddress']
        | null;
      /** @description Order location. */
      orderLocation?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.OrderLocation']
        | null;
      /** @description Order list. */
      orderItems?: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsOrderItem'][];
      /** @description Type of delivery service. */
      isCourierDelivery: boolean;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Delivery date (Local for delivery terminal).
       * @example 2019-08-24 14:15:22.123
       */
      deliveryDate?: string | null;
      /**
       * Format: double
       * @description Sum.
       */
      deliverySum?: number | null;
      /**
       * Format: double
       * @description Discounts sum.
       */
      discountSum?: number | null;
    };
    /** @description Response for a request to identify suitable terminal groups. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.GetAllowedRestrictionsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description A sign of successful verification. */
      isAllowed: boolean;
      /**
       * @deprecated
       * @description Reject cause.
       */
      rejectCause: string | null;
      /** @description Delivery address ID in external mapping system. */
      addressExternalId: string | null;
      /** @description Coordinates returned by geocoding service. */
      location:
        | components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.OrderLocation']
        | null;
      /** @description Suitable terminal groups with a delivery duration for them. */
      allowedItems: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.AllowedItemWithDuration'][];
      /** @description Rejected items with cause. */
      rejectedItems: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RejectItem'][];
    };
    /** @description Order location. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.OrderLocation': {
      /**
       * Format: double
       * @description Latitude.
       */
      latitude: number;
      /**
       * Format: double
       * @description Longitude.
       */
      longitude: number;
    };
    /** @description Rejected item info. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RejectItem': {
      /**
       * Format: uuid
       * @description Terminal group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string | null;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string | null;
      /** @description Delivery zone name which this TerminalGroupId belongs to. */
      zone?: string | null;
      /** @description Reject cause code. */
      rejectCode: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.DeliveryRestrictionRejectCode'];
      /** @description Reject hint. */
      rejectHint: string;
      /** @description Reject additional information. */
      rejectItemData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RejectItemData']
        | null;
    };
    /** @description Reject additional information. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RejectItemData': {
      /**
       * Format: date-span
       * @description Point work time start.
       */
      dateFrom?: string | null;
      /**
       * Format: date-span
       * @description Point work time end.
       */
      dateTo?: string | null;
      /** @description Allowed week days. */
      allowedWeekDays?: string[] | null;
      /**
       * Format: double
       * @description Order min sum.
       */
      minSum?: number | null;
    };
    /** @description Address. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsAddress': {
      /** @description City. */
      city?: string | null;
      /** @description Street. */
      streetName?: string | null;
      /**
       * Format: uuid
       * @description Street ID.
       */
      streetId?: string | null;
      /** @description House. */
      house?: string | null;
      /** @description Building. */
      building?: string | null;
      /** @description Post index. */
      index?: string | null;
    };
    /** @description Order item. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsOrderItem': {
      /**
       * Format: uuid
       * @description Product ID.
       */
      id: string;
      /** @description Product. */
      product: string;
      /**
       * Format: double
       * @description Amount.
       */
      amount: number;
      /** @description Modifiers (absolute amount). */
      modifiers?: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsOrderItemModifier'][];
    };
    /** @description Order item modifier. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsOrderItemModifier': {
      /**
       * Format: uuid
       * @description Product ID.
       */
      id: string;
      /** @description Product. */
      product?: string;
      /**
       * Format: double
       * @description Amount.
       */
      amount: number;
    };
    /** @description Coordinate details. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.Coordinates': {
      /**
       * Format: double
       * @description Latitude.
       */
      latitude: number;
      /**
       * Format: double
       * @description Longitude.
       */
      longitude: number;
    };
    /**
     * Format: int32
     * @description Geocoding service.
     * @enum {integer}
     */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryGeocodeServiceType':
      | 1
      | 2
      | 3
      | 4;
    /** @description Item of delivery restrictions. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionItem': {
      /**
       * Format: double
       * @description The minimum order amount for a given point in a given time interval in this delivery zone.
       */
      minSum: number | null;
      /**
       * Format: uuid
       * @description Terminal group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string | null;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string | null;
      /** @description Name of delivery zone from cartography. */
      zone: string | null;
      /**
       * Format: int32
       * @description Days of the week.
       */
      weekMap: number;
      /**
       * Format: int32
       * @description The time from which the point can process orders from the selected zone, in minutes from the beginning of the day.
       */
      from: number | null;
      /**
       * Format: int32
       * @description The maximum time at which a point can carry an order to a given zone, in minutes from the beginning of the day.
       */
      to: number | null;
      /**
       * Format: int32
       * @description Priority of point in delivery zone.
       */
      priority: number;
      /**
       * Format: int64
       * @description Delivery duration in delivery zone.
       */
      deliveryDurationInMinutes: number;
      /**
       * Format: uuid
       * @description Link to "delivery service payment".
       */
      deliveryServiceProductId: string | null;
    };
    /** @description Delivery restrictions. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictions': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Geocoding service type. */
      deliveryGeocodeServiceType: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryGeocodeServiceType'];
      /** @description Link to the map of delivery service regions. */
      deliveryRegionsMapUrl: string | null;
      /**
       * Format: int64
       * @description General standard of delivery time.
       */
      defaultDeliveryDurationInMinutes: number;
      /**
       * Format: int64
       * @description Default pickup time.
       */
      defaultSelfServiceDurationInMinutes: number;
      /** @description Indication that all delivery points in all delivery zones use common delivery time limits. */
      useSameDeliveryDuration: boolean;
      /** @description Indication that all delivery points for all delivery zones use the total minimum order amount. */
      useSameMinSum: boolean;
      /**
       * Format: double
       * @description Total minimum order amount.
       */
      defaultMinSum: number | null;
      /** @description Indication that all delivery points in all zones use common time limits. */
      useSameWorkTimeInterval: boolean;
      /**
       * Format: int32
       * @description The beginning of the interval of the total work time for all points and delivery zones,
       * in minutes from the beginning of the day.
       */
      defaultFrom: number | null;
      /**
       * Format: int32
       * @description End of the total work time interval for all points and delivery zones,
       * in minutes from the beginning of the day.
       */
      defaultTo: number | null;
      /** @description Indication that all delivery points in all zones use the same schedule for all days of the week. */
      useSameRestrictionsOnAllWeek: boolean;
      /** @description Restrictions. */
      restrictions: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionItem'][];
      /** @description Delivery zones. */
      deliveryZones: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZone'][];
      /** @description Reject delivery if we could not geocode the address. */
      rejectOnGeocodingError: boolean;
      /** @description Add shipping cost to order. */
      addDeliveryServiceCost: boolean;
      /** @description Indication that the cost is the same for all points of delivery. */
      useSameDeliveryServiceProduct: boolean;
      /**
       * Format: uuid
       * @description Link to "delivery service payment".
       */
      defaultDeliveryServiceProductId: string | null;
      /** @description Use external delivery distribution service. */
      useExternalAssignationService: boolean;
      /**
       * @description Indication whether or not to trust on the fronts the call center mapping restrictions from the call center
       * if the composition of the order has not changed since the last check. If true, then trust.
       */
      frontTrustsCallCenterCheck: boolean;
      /** @description Address of external delivery distribution service. */
      externalAssignationServiceUrl: string | null;
      /** @description Require an exact geocoding address. */
      requireExactAddressForGeocoding: boolean;
      /** @description Delivery restrictions mode. */
      zonesMode: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionsMode'];
      /** @description Automatically assigned delivery method based on cartography. */
      autoAssignExternalDeliveries: boolean;
      /** @description Action on problems with auto-assignment. */
      actionOnValidationRejection: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.ActionOnValidationRejection'];
    };
    /**
     * Format: int32
     * @description Delivery restrictions mode.
     * @enum {integer}
     */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionsMode':
      | 0
      | 1
      | 2;
    /** @description Delivery zone. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZone': {
      /** @description Polygon name. */
      name: string;
      /** @description A set of points describing a polygon. */
      coordinates: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.Coordinates'][];
      /** @description A set of addresses describing a polygon. */
      addresses: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZoneAddressBinding'][];
    };
    /** @description Delivery zone polygon, defined by the combination of street, index and house numbers. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZoneAddressBinding': {
      /**
       * Format: uuid
       * @description ID of the delivery zone's street.
       */
      streetId: string;
      /** @description Postcode. */
      postcode: string;
      /** @description Range of house numbers in the delivery zone. */
      houses: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.HousesRange'];
    };
    /** @description Request for delivery restrictions. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.GetDeliveryRestrictionsRequest': {
      /**
       * @description Organizations IDs which delivery restrictions have to be returned.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description Response for delivery restrictions. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.GetDeliveryRestrictionsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Delivery restrictions. */
      deliveryRestrictions: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictions'][];
    };
    /**
     * @description Range of house numbers in the delivery zone.
     * It can work in two modes:
     * a) HousesRangeType.SpecificNumbers - list of house numbers. If the house is on this list - it is in the range
     * b) Rest HousesRangeType. Defines a range of numbers from StartingNumber to MaxNumber.
     * Since it is necessary to compare numbers - only supports numeric house numbers.
     * Type determines the admissibility of even/odd numbers.
     */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.HousesRange': {
      /** @description Type of house number range. */
      type: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.HousesRangeType'];
      /**
       * Format: int32
       * @description Starting house number.
       */
      startingNumber: number;
      /**
       * Format: int32
       * @description Maximum house number.
       */
      maxNumber: number;
      /** @description Unlimited range. */
      isUnlimitedRange: boolean;
      /** @description Specific numbers. */
      specificNumbers: string[];
    };
    /**
     * Format: int32
     * @description Type of house number range.
     * @enum {integer}
     */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.HousesRangeType':
      | 0
      | 1
      | 2
      | 3;
    /** @description Request for update of delivery restrictions. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.UpdateDeliveryRestrictionsRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Geocoding service type. */
      deliveryGeocodeServiceType: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryGeocodeServiceType'];
      /** @description Link to the map of delivery service regions. */
      deliveryRegionsMapUrl: string | null;
      /**
       * Format: int64
       * @description General standard of delivery time.
       */
      defaultDeliveryDurationInMinutes: number;
      /**
       * Format: int64
       * @description Default pickup time.
       */
      defaultSelfServiceDurationInMinutes: number;
      /** @description Indication that all delivery points in all delivery zones use common delivery time limits. */
      useSameDeliveryDuration: boolean;
      /** @description Indication that all delivery points for all delivery zones use the total minimum order amount. */
      useSameMinSum: boolean;
      /**
       * Format: double
       * @description Total minimum order amount.
       */
      defaultMinSum: number | null;
      /** @description Indication that all delivery points in all zones use common time limits. */
      useSameWorkTimeInterval: boolean;
      /**
       * Format: int32
       * @description The beginning of the interval of the total work time for all points and delivery zones,
       * in minutes from the beginning of the day.
       */
      defaultFrom: number | null;
      /**
       * Format: int32
       * @description End of the total work time interval for all points and delivery zones,
       * in minutes from the beginning of the day.
       */
      defaultTo: number | null;
      /** @description Indication that all delivery points in all zones use the same schedule for all days of the week. */
      useSameRestrictionsOnAllWeek: boolean;
      /** @description Restrictions. */
      restrictions: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionItem'][];
      /** @description Delivery zones. */
      deliveryZones: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZone'][];
      /** @description Reject delivery if we could not geocode the address. */
      rejectOnGeocodingError: boolean;
      /** @description Add shipping cost to order. */
      addDeliveryServiceCost: boolean;
      /** @description Indication that the cost is the same for all points of delivery. */
      useSameDeliveryServiceProduct: boolean;
      /**
       * Format: uuid
       * @description Link to "delivery service payment".
       */
      defaultDeliveryServiceProductId: string | null;
      /** @description Use external delivery distribution service. */
      useExternalAssignationService: boolean;
      /**
       * @description Indication whether or not to trust on the fronts the call center mapping restrictions from the call center
       * if the composition of the order has not changed since the last check. If true, then trust.
       */
      frontTrustsCallCenterCheck: boolean;
      /** @description Address of external delivery distribution service. */
      externalAssignationServiceUrl: string | null;
      /** @description Require an exact geocoding address. */
      requireExactAddressForGeocoding: boolean;
      /** @description Delivery restrictions mode. */
      zonesMode: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionsMode'];
      /** @description Automatically assigned delivery method based on cartography. */
      autoAssignExternalDeliveries: boolean;
      /** @description Action on problems with auto-assignment. */
      actionOnValidationRejection: components['schemas']['iikoTransport.PublicApi.Contracts.DeliveryRestrictions.ActionOnValidationRejection'];
    };
    /** @description Response for update of delivery restrictions. */
    'iikoTransport.PublicApi.Contracts.DeliveryRestrictions.UpdateDeliveryRestrictionsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
    };
    /**
     * @description Discount type.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Discounts.DiscountCardMode':
      | 'Percent'
      | 'FlexibleSum'
      | 'FixedSum';
    /** @description Discount/surcharge DTO. */
    'iikoTransport.PublicApi.Contracts.Discounts.DiscountCardTypeInfo': {
      /**
       * Format: uuid
       * @description Discount ID in RMS.
       */
      id: string;
      /** @description Discount name. */
      name: string | null;
      /**
       * Format: double
       * @description Total discount rate.
       * > Ignored if "isCategorisedDiscount" specified.
       */
      percent: number;
      /**
       * @description Whether it is category discount or not.
       * > If true, "productCategoryDiscounts" discounts will apply.
       */
      isCategorisedDiscount: boolean;
      /** @description Category discount. */
      productCategoryDiscounts: components['schemas']['iikoTransport.PublicApi.Contracts.Discounts.ProductCategoryDiscount'][];
      /** @description Comment. */
      comment?: string | null;
      /** @description Whether discount allows for selected application to individual items at user's discretion. */
      canBeAppliedSelectively: boolean;
      /**
       * Format: double
       * @description Minimum order amount required for discount application.
       * If order amount is less than specified threshold, discount does not apply.
       */
      minOrderSum?: number | null;
      /**
       * @description Discount type.
       *
       * Can be obtained by `/api/1/discounts` operation.
       */
      mode: components['schemas']['iikoTransport.PublicApi.Contracts.Discounts.DiscountCardMode'];
      /**
       * Format: double
       * @description Fixed amount.
       * > Triggers if fixed amount has been specified.
       */
      sum: number;
      /**
       * @description Can be applied by card No.
       * > If true, it's enough to enter discount card No. (card swiping not required)
       */
      canApplyByCardNumber: boolean;
      /** @description Created manually. */
      isManual: boolean;
      /** @description Executed by card. */
      isCard: boolean;
      /** @description Created automatically. */
      isAutomatic: boolean;
      /** @description IsDeleted. */
      isDeleted?: boolean;
    };
    /** @description Request of discounts/surcharges. */
    'iikoTransport.PublicApi.Contracts.Discounts.DiscountsRequest': {
      /**
       * @description Organization IDs that require discounts return.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description Response with list of discounts/surcharges. */
    'iikoTransport.PublicApi.Contracts.Discounts.DiscountsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of discounts/surcharges. */
      discounts: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Discounts.DiscountCardTypeInfo, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description Product category discount details. */
    'iikoTransport.PublicApi.Contracts.Discounts.ProductCategoryDiscount': {
      /**
       * Format: uuid
       * @description Category ID.
       */
      categoryId: string;
      /** @description Category name. */
      categoryName: string | null;
      /**
       * Format: double
       * @description This category discount %.
       */
      percent: number;
    };
    /** @description Courier's location. */
    'iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocation': {
      /**
       * Format: uuid
       * @description Employee ID.
       */
      courierId?: string;
      /**
       * Format: double
       * @description Latitude.
       */
      lastActiveLatitude?: number | null;
      /**
       * Format: double
       * @description Longitude.
       */
      lastActiveLongitude?: number | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Client date and time.
       * @example 2019-08-24 14:15:22.123
       */
      lastActiveClientDate?: string | null;
    };
    /** @description Request for list of active drivers for front group with ID = *TerminalGroupId*. */
    'iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsByTerminalGroupRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Syrve POS terminals group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
    };
    /** @description Wrapping object to retrieve list of active courier locations. */
    'iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of courier's locations. */
      activeCourierLocations: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocation, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description Personal session change response. */
    'iikoTransport.PublicApi.Contracts.Employees.ChangePersonalSessionResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Error details. */
      error?: string | null;
    };
    /** @description Close personal session request. */
    'iikoTransport.PublicApi.Contracts.Employees.ClosePersonalSessionRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Delivery group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /**
       * Format: uuid
       * @description Employee ID.
       */
      employeeId: string;
    };
    /** @description DTO of map coordinates. */
    'iikoTransport.PublicApi.Contracts.Employees.CoordinateInfo': {
      /**
       * Format: double
       * @description Latitude.
       */
      latitude: number;
      /**
       * Format: double
       * @description Longitude.
       */
      longitude: number;
      /**
       * Format: int64
       * @description Time of coordinate saving on server in the Unix timestamp format.
       */
      serverTimestamp: number;
    };
    /** @description Driver location details. */
    'iikoTransport.PublicApi.Contracts.Employees.CourierLocations': {
      /**
       * Format: uuid
       * @description Driver ID.
       */
      courierId: string;
      /** @description List of locations. */
      locations: components['schemas']['iikoTransport.PublicApi.Contracts.Employees.CoordinateInfo'][];
    };
    /**
     * @description Request for coordinates history of drivers in OrganizationIds organizations.
     * If driver coordinates were recorded in server storage within interval:
     * ["current server time" - OffsetInSeconds, "current server time"),
     * driver and their coordinates will be retrieved.
     */
    'iikoTransport.PublicApi.Contracts.Employees.CourierLocationsByTimeOffsetRequest': {
      /** @description List of organizations for drivers coordinates of which will be retrieved. */
      organizationIds: string[];
      /**
       * Format: int32
       * @description Interval in seconds from current server time.
       * If driver coordinates were recorded in server storage
       * within interval: ("current server time" - *OffsetInSeconds*, "current server time"],
       * driver and their coordinates will be retrieved.
       */
      offsetInSeconds?: number | null;
    };
    /** @description DTO containing driver coordinates details for the last N seconds. */
    'iikoTransport.PublicApi.Contracts.Employees.CourierLocationsByTimeOffsetResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of drivers' coordinates broken down by organizations. */
      courierLocations: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.CourierLocations, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description Request for list of drivers for organizations in OrganizationIds. */
    'iikoTransport.PublicApi.Contracts.Employees.CouriersAndCheckRoleRequest': {
      /**
       * @description List of organizations.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /** @description Employee's roles for check. The short name of employee's position. */
      rolesToCheck: string[];
    };
    /** @description Request for list of drivers for organizations in OrganizationIds. */
    'iikoTransport.PublicApi.Contracts.Employees.CouriersRequest': {
      /** @description List of organizations. */
      organizationIds: string[];
    };
    /** @description Employee DTO. */
    'iikoTransport.PublicApi.Contracts.Employees.Employee': {
      /**
       * Format: uuid
       * @description Employee ID.
       */
      id: string;
      /** @description Name of user. */
      firstName?: string | null;
      /** @description Second name. */
      middleName?: string | null;
      /** @description Last name. */
      lastName?: string | null;
      /** @description Displayed name (system name). */
      displayName?: string | null;
      /** @description Code. */
      code?: string | null;
      /** @description User deletion flag. */
      isDeleted?: boolean;
    };
    /** @description Employee info. */
    'iikoTransport.PublicApi.Contracts.Employees.EmployeeInfo': {
      /**
       * Format: uuid
       * @description Employee ID.
       */
      id: string;
      /** @description Name of employee. */
      firstName?: string | null;
      /** @description Second name. */
      middleName?: string | null;
      /** @description Last name. */
      lastName?: string | null;
      /** @description Email. */
      email?: string | null;
      /** @description Phone. */
      phone?: string | null;
      /** @description Cell phone. */
      cellPhone?: string | null;
    };
    /** @description Request for employee info. */
    'iikoTransport.PublicApi.Contracts.Employees.EmployeeInfoRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Employee ID.
       */
      id: string;
    };
    /** @description Response for employee info. */
    'iikoTransport.PublicApi.Contracts.Employees.EmployeeInfoResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Employee info. */
      employeeInfo: components['schemas']['iikoTransport.PublicApi.Contracts.Employees.EmployeeInfo'];
    };
    /** @description Wrapping object to retrieve list of drivers from Syrve Instance. */
    'iikoTransport.PublicApi.Contracts.Employees.EmployeesResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of drivers. */
      employees: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.Employee, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description Wrapping object to retrieve list of drivers from Syrve Instance with checked role. */
    'iikoTransport.PublicApi.Contracts.Employees.EmployeesWithRoleSignResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of drivers. */
      employeesWithCheckRoles: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.EmployeeWithCheckedRole, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description Employee DTO. */
    'iikoTransport.PublicApi.Contracts.Employees.EmployeeWithCheckedRole': {
      /** @description Result of check employee's roles. */
      checkRolesResult?: components['schemas']['iikoTransport.PublicApi.Contracts.Employees.RoleCheckResult'][];
      /**
       * Format: uuid
       * @description Employee ID.
       */
      id: string;
      /** @description Name of user. */
      firstName?: string | null;
      /** @description Second name. */
      middleName?: string | null;
      /** @description Last name. */
      lastName?: string | null;
      /** @description Displayed name (system name). */
      displayName?: string | null;
      /** @description Code. */
      code?: string | null;
      /** @description User deletion flag. */
      isDeleted?: boolean;
    };
    /** @description Personal session request. */
    'iikoTransport.PublicApi.Contracts.Employees.GetPersonalSessionInfoRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Delivery group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /**
       * Format: uuid
       * @description Employee ID.
       */
      employeeId: string;
    };
    /** @description Personal session info response. */
    'iikoTransport.PublicApi.Contracts.Employees.GetPersonalSessionInfoResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Is personal session opened. */
      isSessionOpened?: boolean | null;
      /** @description Error details. */
      error?: string | null;
    };
    /** @description Open personal session request. */
    'iikoTransport.PublicApi.Contracts.Employees.OpenPersonalSessionRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Delivery group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /**
       * Format: uuid
       * @description Employee ID.
       */
      employeeId: string;
      /**
       * Format: uuid
       * @description Employee role ID.
       *
       * Must be null if the restaurant doesn't use roles, otherwise not-null role must be specified.
       */
      roleId?: string | null;
    };
    /** @description Employee personal shift info. */
    'iikoTransport.PublicApi.Contracts.Employees.PersonalShift': {
      /**
       * Format: uuid
       * @description Employee ID.
       */
      id: string;
      /** @description Personal shift state flag (true - shift is opened, false - shift is closed). */
      opened: boolean;
      /**
       * Format: uuid
       * @description ID of the terminal group where the personal shift is opened/closed.
       */
      terminalGroupId: string;
    };
    /** @description Result of checking employee role. */
    'iikoTransport.PublicApi.Contracts.Employees.RoleCheckResult': {
      /** @description Checked for employee role. */
      checkedRoleCode: string;
      /** @description Sign that employee has role "checkedRoleCode". */
      employeeHasRole: boolean;
    };
    /** @enum {string} */
    'iikoTransport.PublicApi.Contracts.Errors.ErrorCode':
      | 'Common'
      | 'IllegalDeliveryStatus'
      | 'CustomerNameNotSpecified'
      | 'ProductNotFound'
      | 'MarketingSourceNotFound'
      | 'PaymentTypeNotFound'
      | 'ProductSizeNotFound'
      | 'ProductGroupNotFound'
      | 'OrderNotFound'
      | 'ConceptionNotFound'
      | 'DuplicatedOrderId'
      | 'TerminalGroupIdNotDetermined'
      | 'TerminalGroupUnregistered'
      | 'InvalidPhone'
      | 'ModifierDuplicated'
      | 'ProductCanBuyFromCashdesk'
      | 'DeliveryOpinionMarkInvalid'
      | 'WrongDeliveryStatusForOpinion'
      | 'OpinionCommentTooLong'
      | 'SurveyItemNotFound'
      | 'PaymentTypeCanNotBeUsedAsExternal'
      | 'AddressNotFound'
      | 'HomeNotFound'
      | 'IikonetPaymentAdditionalDataCanNotBeParsed'
      | 'IikonetPaymentExternalIdNotFound'
      | 'IikonetPaymentSumLessThanMarketingDiscount'
      | 'DiscountCardNotFound'
      | 'DiscountCardTypeModeForbidden'
      | 'Iikocard5PaymentAdditionalDataCanNotBeParsed'
      | 'Iikocard5PaymentExternalIdNotFound'
      | 'Iikocard5PaymentSumLessThanMarketingDiscount'
      | 'Iikocard5PaymentCanNotCreateCustomData'
      | 'CourierIdDoesNotExist'
      | 'CourierDoesNotOwnOrder'
      | 'WrongDeliveryStatus'
      | 'CanNotAssignCourierToOrder'
      | 'UserNotFoundByExternalPassword'
      | 'UserNotFound'
      | 'Iikocard51PaymentAdditionalDataCanNotBeParsed'
      | 'Iikocard51PaymentCredentialNotFound'
      | 'Iikocard51PaymentSearchScopeNotFound'
      | 'ComboDuplicated'
      | 'InvalidReferenceToCombo'
      | 'InvalidComboItemsAmount'
      | 'InvalidComboItemsGuest'
      | 'InvalidReferenceToGuest'
      | 'GuestDuplicated'
      | 'GuestNameNotSpecified'
      | 'OrderTypeNotFound'
      | 'OrderServiceTypeDoesNotMatchSelfServiceMode'
      | 'DeliveryDateNotSpecified'
      | 'OrderStatusChangedInIikoFront'
      | 'PaymentAdditionalDataTooLong'
      | 'PaymentSumShouldBePositive'
      | 'DiscountSumNotSpecified'
      | 'InvalidDiscountItem'
      | 'RequestProductPriceIsNotEqualToFrontPrice'
      | 'OrderItemsNotExists'
      | 'EntityAlreadyInUse'
      | 'DiscountItemPositionNotFound'
      | 'DiscountItemDuplicatePositions'
      | 'NonUnqiueOrderItemPosition'
      | 'EmptyOrderItemPosition'
      | 'IncorrectOrderType'
      | 'Incorrect'
      | 'TerminalGroupDisabled'
      | 'OrganizationUnregistered'
      | 'OrganizationDisabled'
      | 'TooSmallDeliveryDate'
      | 'IikoFrontTooOldVersion'
      | 'DuplicatedReserveId'
      | 'TipsTypeNotApplicable'
      | 'AnonymousCustomerDisabled'
      | 'InternalServerError'
      | 'UnknownError';
    /** @description DTO for error details transfer. */
    'iikoTransport.PublicApi.Contracts.Errors.ErrorInfo': {
      /** @description Error code. */
      code: components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorCode'];
      /** @description Nonlocalized message. */
      message?: string | null;
      /** @description Localized message. */
      description?: string | null;
      /** @description Additional information. */
      additionalData?: Record<string, unknown> | null;
    };
    /** @description Error response. */
    'iikoTransport.PublicApi.Contracts.Errors.ErrorResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Error text. */
      errorDescription: string;
      /** @description Error code. */
      error?: string | null;
    };
    /** @description Filter for delivery orders. */
    'iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.DeliveryOrderWebHooksFilter': {
      /** @description Statuses of orders, when changing which need to send a notification. */
      orderStatuses?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus'][]
        | null;
      /** @description Statuses of order items, when changing which need to send a notification. */
      itemStatuses?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemStatus'][]
        | null;
      /** @description Flag for errors. */
      errors?: boolean;
    };
    /** @description Filter for updates and errors. */
    'iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.ReserveWebHookFilter': {
      /** @description Flag for updates. */
      updates?: boolean;
      /** @description Flag for errors. */
      errors?: boolean;
    };
    /** @description Filter for table orders. */
    'iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.TableOrderWebHookFilter': {
      /** @description Statuses of orders, when changing which need to send a notification. */
      orderStatuses?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Orders.Common.OrderStatus'][]
        | null;
      /** @description Statuses of order items, when changing which need to send a notification. */
      itemStatuses?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemStatus'][]
        | null;
      /** @description Flag for updates. */
      errors?: boolean;
    };
    /** @description Webhooks filter. */
    'iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHooksFilter': {
      /** @description Filter for delivery orders. */
      deliveryOrderFilter?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.DeliveryOrderWebHooksFilter']
        | null;
      /** @description Filter for table orders. */
      tableOrderFilter?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.TableOrderWebHookFilter']
        | null;
      /** @description Filter for banquets/reserves. */
      reserveFilter?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.ReserveWebHookFilter']
        | null;
      /** @description Filter for stop-lists changes. */
      stopListUpdateFilter?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHookShortFilter']
        | null;
      /** @description Filter for personal shift. */
      personalShiftFilter?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHookShortFilter']
        | null;
    };
    /** @description Filter for updates. */
    'iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHookShortFilter': {
      /** @description Flag for updates. */
      updates?: boolean;
    };
    /** @description DTO for marketing source in Syrve Instance. */
    'iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSource': {
      /**
       * Format: uuid
       * @description Marketing source ID.
       */
      id: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Marketing source name. */
      name: string;
      /**
       * Format: int64
       * @description External system revision number.
       */
      externalRevision?: number | null;
      /** @description IsDeleted attribute of marketing source. */
      isDeleted?: boolean;
      /** @description Attached marketing sources. */
      attachedSources: string[];
    };
    /** @description Request for marketing sources. */
    'iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSourcesRequest': {
      /**
       * @description Organizations IDs which marketing sources have to be returned.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description Response to request for marketing sources by organization. */
    'iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSourcesResponse': {
      /** Format: uuid */
      correlationId: string;
      /** @description List of marketing sources. */
      marketingSources: components['schemas']['iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSource'][];
    };
    /** @description Child modifier details. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.ChildModifierInfo': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /**
       * Format: int32
       * @description Default quantity.
       */
      defaultAmount?: number | null;
      /**
       * Format: int32
       * @description Minimum quantity.
       */
      minAmount: number;
      /**
       * Format: int32
       * @description Maximum quantity.
       */
      maxAmount: number;
      /** @description Required availability. */
      required?: boolean | null;
      /** @description Hide if default amount applied. This field is supported since 7.2.4 Syrve Instance version. */
      hideIfDefaultAmount?: boolean | null;
      /** @description Modifier can be split. This field is supported since 7.2.4 Syrve Instance version. */
      splittable?: boolean | null;
      /**
       * Format: int32
       * @description Free of charge amount. This field is supported since 7.2.4 Syrve Instance version.
       */
      freeOfChargeAmount?: number | null;
    };
    /** @description External menu, related to ApiLogin. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.ExternalMenu': {
      /** @description ID. */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description Information on group of modifiers. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.GroupModifierInfo': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /**
       * Format: int32
       * @description Minimum quantity.
       */
      minAmount: number;
      /**
       * Format: int32
       * @description Maximum quantity.
       */
      maxAmount: number;
      /** @description Required availability. */
      required: boolean | null;
      /** @description Presence of max/min quantity limitations of child modifiers. */
      childModifiersHaveMinMaxRestrictions?: boolean | null;
      /** @description List of child modifiers. */
      childModifiers: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.ChildModifierInfo'][];
      /** @description Hide if the amount is by default. This field is supported since 7.2.4 Syrve Instance version. */
      hideIfDefaultAmount?: boolean | null;
      /**
       * Format: int32
       * @description Amount by default. This field is supported since 7.2.4 Syrve Instance version.
       */
      defaultAmount?: number | null;
      /** @description Modifier can be split. This field is supported since 7.2.4 Syrve Instance version. */
      splittable?: boolean | null;
      /**
       * Format: int32
       * @description Free amount. This field is supported since 7.2.4 Syrve Instance version.
       */
      freeOfChargeAmount?: number | null;
    };
    /** @description Request for menu by id. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.MenuRequest': {
      /**
       * @description External menu id
       *
       * Can be obtained by `api/2/menu` operation.
       */
      externalMenuId: string;
      /**
       * @description Organization IDs.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /**
       * @description Price category id.
       *
       * Can be obtained by `api/2/menu` operation.
       */
      priceCategoryId?: string | null;
      /**
       * Format: int32
       * @description Version of the result data model.
       */
      version?: number | null;
      /** @description Language of the external menu. */
      language?: string | null;
      /**
       * @deprecated
       * @description Async Mode.
       * @example false
       */
      asyncMode?: boolean;
    };
    /** @description Response with stock lists. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.MenusDataResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description External menu. */
      externalMenus?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.ExternalMenu'][]
        | null;
      /** @description Price category. */
      priceCategories?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.PriceCategory'][]
        | null;
    };
    /** @description Request for stock list by organization. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.NomenclatureRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: int64
       * @description Initial revision. Items list will be received only in case there is a newer revision in the database.
       */
      startRevision?: number | null;
    };
    /** @description Response with stock lists. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.NomenclatureResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Stock list group. */
      groups: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.ProductsGroupInfo'][];
      /** @description Menu item category. */
      productCategories: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.ProductCategoryInfo'][];
      /** @description Menu items and modifiers. */
      products: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.ProductInfo'][];
      /** @description Item sizes. */
      sizes: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.Size'][];
      /**
       * Format: int64
       * @description Items list revision.
       */
      revision: number;
    };
    /**
     * @description Flag that determines dish linkage with modifiers scheme.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Nomenclature.OrderItemType':
      | 'Product'
      | 'Compound';
    /** @description Price per this item size. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.Price': {
      /**
       * Format: double
       * @description Current price.
       */
      currentPrice: number;
      /** @description Is on the menu. */
      isIncludedInMenu: boolean;
      /**
       * Format: double
       * @description New price
       */
      nextPrice?: number | null;
      /** @description Will be on the menu in the future. */
      nextIncludedInMenu: boolean;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description New price validity start date (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      nextDatePrice?: string | null;
    };
    /** @description Price category, related to ApiLogin. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.PriceCategory': {
      /** @description ID. */
      id: string;
      /** @description Name. */
      name: string;
    };
    /** @description DTO for outside transferring of product category details. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.ProductCategoryInfo': {
      /**
       * Format: uuid
       * @description Product category ID.
       */
      id: string;
      /** @description Name. */
      name: string;
      /** @description Is deleted attribute. */
      isDeleted: boolean;
    };
    /** @description DTO for outside transferring of external menu item details. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.ProductInfo': {
      /**
       * Format: double
       * @description Fat per 100g.
       */
      fatAmount?: number | null;
      /**
       * Format: double
       * @description Protein per 100g.
       */
      proteinsAmount?: number | null;
      /**
       * Format: double
       * @description Carbohydrate per 100g.
       */
      carbohydratesAmount?: number | null;
      /**
       * Format: double
       * @description Calories per 100g.
       */
      energyAmount?: number | null;
      /**
       * Format: double
       * @description Fat per item.
       */
      fatFullAmount?: number | null;
      /**
       * Format: double
       * @description Protein per item.
       */
      proteinsFullAmount?: number | null;
      /**
       * Format: double
       * @description Carbohydrate per item.
       */
      carbohydratesFullAmount?: number | null;
      /**
       * Format: double
       * @description Calories per item.
       */
      energyFullAmount?: number | null;
      /**
       * Format: double
       * @description Item weight.
       */
      weight?: number | null;
      /**
       * Format: uuid
       * @description Stock list group in RMS.
       */
      groupId?: string | null;
      /**
       * Format: uuid
       * @description Product category in RMS.
       */
      productCategoryId?: string | null;
      /** @description dish | good | modifier. */
      type?: string | null;
      /** @description Product or compound. Depends on modifiers scheme existence. */
      orderItemType?: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.OrderItemType'];
      /**
       * Format: uuid
       * @description Modifier schema's ID.
       */
      modifierSchemaId?: string | null;
      /** @description Modifier schema's name. */
      modifierSchemaName?: string | null;
      /** @description Is product splittable. */
      splittable: boolean;
      /** @description Item's unit of measurement. */
      measureUnit?: string;
      /** @description Prices. */
      sizePrices?: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.SizePrice'][];
      /** @description Modifiers. */
      modifiers?: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.SimpleModifierInfo'][];
      /** @description Modifier groups. */
      groupModifiers?: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.GroupModifierInfo'][];
      /** @description Links to images. */
      imageLinks?: string[];
      /** @description Do not print on bill. */
      doNotPrintInCheque?: boolean;
      /**
       * Format: uuid
       * @description External menu group.
       */
      parentGroup?: string | null;
      /**
       * Format: int32
       * @description Product's order (priority) in menu.
       */
      order?: number;
      /** @description Full name in a foreign language. */
      fullNameEnglish?: string | null;
      /** @description Weighed product. */
      useBalanceForSell: boolean;
      /** @description Open price. */
      canSetOpenPrice: boolean;
      /** @description Payment subject. */
      paymentSubject?: string | null;
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description SKU. */
      code?: string | null;
      /** @description Name. */
      name: string;
      /** @description Description. */
      description?: string | null;
      /** @description Additional information. */
      additionalInfo?: string | null;
      /** @description Tags. */
      tags?: string[] | null;
      /** @description Is-Deleted attribute. */
      isDeleted?: boolean;
      /** @description SEO description for client. */
      seoDescription?: string | null;
      /** @description SEO text for robots. */
      seoText?: string | null;
      /** @description SEO key words. */
      seoKeywords?: string | null;
      /** @description SEO header. */
      seoTitle?: string | null;
    };
    /** @description DTO for outside transferring of external menu group details. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.ProductsGroupInfo': {
      /** @description Links to images. */
      imageLinks: string[];
      /**
       * Format: uuid
       * @description Parent group.
       */
      parentGroup?: string | null;
      /**
       * Format: int32
       * @description Group's order (priority) in menu.
       */
      order: number;
      /** @description On-the-menu attribute. */
      isIncludedInMenu: boolean;
      /**
       * @description Is group modifier attribute.
       * * true - group modifier.
       * * false - external menu group.
       */
      isGroupModifier: boolean;
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /** @description SKU. */
      code?: string | null;
      /** @description Name. */
      name: string;
      /** @description Description. */
      description?: string | null;
      /** @description Additional information. */
      additionalInfo?: string | null;
      /** @description Tags. */
      tags?: string[] | null;
      /** @description Is-Deleted attribute. */
      isDeleted?: boolean;
      /** @description SEO description for client. */
      seoDescription?: string | null;
      /** @description SEO text for robots. */
      seoText?: string | null;
      /** @description SEO key words. */
      seoKeywords?: string | null;
      /** @description SEO header. */
      seoTitle?: string | null;
    };
    /** @description Modifier details. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.SimpleModifierInfo': {
      /**
       * Format: uuid
       * @description ID.
       */
      id: string;
      /**
       * Format: int32
       * @description Default quantity.
       */
      defaultAmount?: number | null;
      /**
       * Format: int32
       * @description Minimum quantity.
       */
      minAmount: number;
      /**
       * Format: int32
       * @description Maximum quantity.
       */
      maxAmount: number;
      /** @description Required availability. */
      required?: boolean | null;
      /** @description Hide if default amount applied. This field is supported since 7.2.4 Syrve Instance version. */
      hideIfDefaultAmount?: boolean | null;
      /** @description Modifier can be split. This field is supported since 7.2.4 Syrve Instance version. */
      splittable?: boolean | null;
      /**
       * Format: int32
       * @description Free of charge amount. This field is supported since 7.2.4 Syrve Instance version.
       */
      freeOfChargeAmount?: number | null;
    };
    /** @description Item size. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.Size': {
      /**
       * Format: uuid
       * @description ID.
       */
      id?: string;
      /** @description Name. */
      name?: string;
      /**
       * Format: int32
       * @description Priority (serial number) of the size in the size scale.
       */
      priority?: number | null;
      /** @description Is the default size in the size scale. */
      isDefault?: boolean | null;
    };
    /** @description Price per item size. */
    'iikoTransport.PublicApi.Contracts.Nomenclature.SizePrice': {
      /**
       * Format: uuid
       * @description Item size ID.
       */
      sizeId: string | null;
      /** @description Price per this item size. */
      price: components['schemas']['iikoTransport.PublicApi.Contracts.Nomenclature.Price'];
    };
    /** @description Request to notify external systems (Syrve POS and Syrve App) about a delivery requiring attention. */
    'iikoTransport.PublicApi.Contracts.Notifications.DeliveryAttentionNotificationRequest': {
      /** @description Order source. */
      orderSource: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description Additional info about the problem. */
      additionalInfo: string;
      /**
       * Format: uuid
       * @description Organization UOC Id.
       */
      organizationId: string;
    };
    /** @description Request to notify external systems (Syrve POS and Syrve App) about an external courier arrived to the restaurant to pickup an order. */
    'iikoTransport.PublicApi.Contracts.Notifications.ExternalCourierArrivedNotificationRequest': {
      /** @description Order source. */
      orderSource: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description Courier name. */
      courierName?: string | null;
      /** @description Courier car's model and number. */
      courierCar?: string | null;
      /** @description Courier phone. */
      courierPhone?: string | null;
      /**
       * Format: uuid
       * @description Organization UOC Id.
       */
      organizationId: string;
    };
    /** @description Request to notify external systems (Syrve POS and Syrve App) about an external courier has been assigned for a delivery order. */
    'iikoTransport.PublicApi.Contracts.Notifications.ExternalCourierAssignedNotificationRequest': {
      /** @description Order source. */
      orderSource: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description Courier name. */
      courierName?: string | null;
      /** @description Courier car's model and number. */
      courierCar?: string | null;
      /** @description Courier phone. */
      courierPhone?: string | null;
      /**
       * Format: uuid
       * @description Organization UOC Id.
       */
      organizationId: string;
    };
    /** @description Request to notify external systems (Syrve POS and Syrve App) about an order requiring attention. */
    'iikoTransport.PublicApi.Contracts.Notifications.OrderAttentionNotificationRequest': WithRequired<
      {
        messageType: 'order_attention';
        /** @description Order source. */
        orderSource: string;
        /**
         * Format: uuid
         * @description Order ID.
         */
        orderId: string;
        /** @description Additional info about the problem. */
        additionalInfo: string;
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Notifications.SendNotificationRequest'],
        'messageType'
      >,
      'orderSource' | 'orderId' | 'additionalInfo'
    >;
    /** @description Request to notify external systems (Syrve POS and Syrve App). */
    'iikoTransport.PublicApi.Contracts.Notifications.SendNotificationRequest': {
      messageType: string;
      /**
       * Format: uuid
       * @description Organization UOC Id.
       */
      organizationId: string;
    };
    /** @description Request for add order payments. */
    'iikoTransport.PublicApi.Contracts.Orders.Common.AddOrderPaymentsRequest': {
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Order payments. */
      payments: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'][];
    };
    /** @description Order creation options */
    'iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettings': {
      /**
       * Format: int32
       * @description Timeout in seconds that specifies how much time is given for order to reach Syrve POS.
       * After this time, order is nullified if Syrve POS doesn't take it. By default - 8 seconds.
       */
      transportToFrontTimeout?: number | null;
      /**
       * @description Flag indicating whether there's need to check order items in out-of-stock list.
       *
       * Unable if `terminalGroupId` is null.
       * @example false
       */
      checkStopList?: boolean;
    };
    /**
     * @description Describes the status of an order.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Orders.Common.OrderStatus':
      | 'New'
      | 'Bill'
      | 'Closed'
      | 'Deleted';
    /**
     * @description Order service type.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.OrderTypes.OrderServiceType':
      | 'Common'
      | 'DeliveryByCourier'
      | 'DeliveryPickUp';
    /** @description Order type. */
    'iikoTransport.PublicApi.Contracts.OrderTypes.OrderType': {
      /**
       * Format: uuid
       * @description Order type ID in RMS.
       */
      id: string;
      /** @description Order type name. */
      name: string;
      /** @description Service type. */
      orderServiceType: components['schemas']['iikoTransport.PublicApi.Contracts.OrderTypes.OrderServiceType'];
      /** @description IsDeleted attribute of order type. */
      isDeleted?: boolean;
      /**
       * Format: int64
       * @description External system revision number.
       */
      externalRevision?: number | null;
    };
    /** @description Request for order types. */
    'iikoTransport.PublicApi.Contracts.OrderTypes.OrderTypesRequest': {
      /**
       * @description Organizations IDs which payment types have to be returned.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description Response to request for order types by organization. */
    'iikoTransport.PublicApi.Contracts.OrderTypes.OrderTypesResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of order types. */
      orderTypes: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.OrderTypes.OrderType, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /**
     * @description Address format type.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Organizations.AddressFormatType':
      | 'Legacy'
      | 'City'
      | 'International'
      | 'IntNoPostcode';
    /**
     * @description Delivery settings service type.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Organizations.DeliverySettingsServiceType':
      | 'CourierOnly'
      | 'SelfServiceOnly'
      | 'CourierAndSelfService';
    /** @description Organization details. */
    'iikoTransport.PublicApi.Contracts.Organizations.ExtendedOrganizationInfo': WithRequired<
      {
        responseType: 'Extended';
        /** @description Country. */
        country: string | null;
        /** @description Restaurant address. */
        restaurantAddress: string | null;
        /**
         * Format: double
         * @description Latitude.
         */
        latitude: number;
        /**
         * Format: double
         * @description Longitude.
         */
        longitude: number;
        /** @description Regional setting "Use the UAE Addressing System". */
        useUaeAddressingSystem: boolean;
        /** @description Syrve Instance version. */
        version: string;
        /** @description ISO currency code (for example: RUB, USD, EUR). */
        currencyIsoName: string | null;
        /**
         * Format: double
         * @description Value rounding of position.
         */
        currencyMinimumDenomination: number | null;
        /** @description Country dialing code. */
        countryPhoneCode: string | null;
        /** @description Require mandatory marketing source input when creating a delivery. */
        marketingSourceRequiredInDelivery: boolean | null;
        /**
         * Format: uuid
         * @description Default delivery city.
         */
        defaultDeliveryCityId: string | null;
        /** @description Delivery cities. */
        deliveryCityIds: string[] | null;
        /** @description Delivery type. */
        deliveryServiceType:
          | components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.DeliverySettingsServiceType']
          | null;
        /**
         * Format: uuid
         * @description Default payment type for CallCenter.
         */
        defaultCallCenterPaymentTypeId: string | null;
        /** @description Allow text comments for order items (in all restaurant sections). */
        orderItemCommentEnabled: boolean | null;
        /** @description Restaurant`s INN (Taxpayer Identification Number). */
        inn: string | null;
        /** @description Address format type. */
        addressFormatType: components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.AddressFormatType'];
        /** @description Determines whether to use delivery confirmation. */
        isConfirmationEnabled: boolean | null;
        /**
         * Format: int32
         * @description Confirm orders time interval.
         */
        confirmAllowedIntervalInMinutes: number | null;
        /** @description Determines whether organization is hosted in Syrve Cloud. */
        isCloud: boolean;
        /**
         * @description If the store allows orders for anonymous guests, then it is not necessary to transfer
         * information about the guest as part of the delivery order. You can only transfer
         * the phone number and optionally name of the guest, which will not be stored in the guest base
         * and will only be used for the delivery of a current delivery order.
         */
        isAnonymousGuestsAllowed?: boolean;
        /** @description Available address lookup services. */
        addressLookup: components['schemas']['iikoTransport.PublicApi.Contracts.AddressHints.AddressHintsServiceType'][];
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.OrganizationInfo'],
        'responseType'
      >,
      | 'country'
      | 'restaurantAddress'
      | 'latitude'
      | 'longitude'
      | 'useUaeAddressingSystem'
      | 'version'
      | 'currencyIsoName'
      | 'currencyMinimumDenomination'
      | 'countryPhoneCode'
      | 'marketingSourceRequiredInDelivery'
      | 'defaultDeliveryCityId'
      | 'deliveryCityIds'
      | 'deliveryServiceType'
      | 'defaultCallCenterPaymentTypeId'
      | 'orderItemCommentEnabled'
      | 'inn'
      | 'addressFormatType'
      | 'isConfirmationEnabled'
      | 'confirmAllowedIntervalInMinutes'
      | 'isCloud'
      | 'addressLookup'
    >;
    /** @description Request for organizations. */
    'iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsRequest': {
      /**
       * @description Organizations IDs which have to be returned. By default - all organizations from apiLogin.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds?: string[] | null;
      /**
       * @description A sign whether additional information about the organization should be returned (RMS version, country, restaurantAddress, etc.),
       *   or only minimal information should be returned (id and name).
       */
      returnAdditionalInfo?: boolean;
      /** @description Attribute that shows that response contains disabled organizations. */
      includeDisabled?: boolean;
      /** @description External data keys that have to be returned. */
      returnExternalData?: string[] | null;
    };
    /** @description Response to request for organizations. */
    'iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /**
       * @description List of organizations.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizations: components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.OrganizationInfo'][];
    };
    /** @description Response to request for organizations. */
    'iikoTransport.PublicApi.Contracts.Organizations.GetSimpleOrganizationsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /**
       * @description List of organizations.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizations: components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.SimpleOrganizationInfo'][];
    };
    /** @description Organization details. */
    'iikoTransport.PublicApi.Contracts.Organizations.OrganizationInfo': {
      responseType: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      id: string;
      /** @description Organization name. */
      name: string | null;
      /** @description Organization`s code. */
      code?: string | null;
      /** @description Organization`s external data. */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Common.ExternalData'][]
        | null;
    };
    /** @description Organization details. */
    'iikoTransport.PublicApi.Contracts.Organizations.SimpleOrganizationInfo': {
      responseType: 'Simple';
    } & Omit<
      components['schemas']['iikoTransport.PublicApi.Contracts.Organizations.OrganizationInfo'],
      'responseType'
    >;
    /**
     * @description Payment processing type.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentProcessingType':
      | 'External'
      | 'Internal'
      | 'Both';
    /** @description DTO for payment type in Syrve Instance */
    'iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentType': {
      /**
       * Format: uuid
       * @description Payment type ID
       */
      id?: string | null;
      /** @description Payment type code */
      code?: string | null;
      /** @description Payment type name */
      name?: string | null;
      /** @description Payment type comment */
      comment?: string | null;
      /** @description Combinability attribute */
      combinable?: boolean;
      /**
       * Format: int64
       * @description External system revision number.
       */
      externalRevision?: number | null;
      /** @description Array of marketing campaigns associated with LoyaltyApp payment type applicable to this organization. */
      applicableMarketingCampaigns: string[];
      /** @description IsDeleted attribute of payment type. */
      isDeleted?: boolean;
      /** @description If true, payment type is fiscal and bill will be printed. */
      printCheque?: boolean;
      /** @description Describes operation processing type. */
      paymentProcessingType?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentProcessingType']
        | null;
      /** @description Payment type category. */
      paymentTypeKind?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypeKind']
        | null;
      /** @description Terminal groups where this payment type is available. */
      terminalGroups: components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup'][];
    };
    /**
     * @description Payment type category.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypeKind':
      | 'Unknown'
      | 'Cash'
      | 'Card'
      | 'Credit'
      | 'Writeoff'
      | 'Voucher'
      | 'External'
      | 'IikoCard';
    /** @description Request for payment types. */
    'iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypesRequest': {
      /**
       * @description Organizations IDs which payment types have to be returned.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description Response to request for payment types by organization. */
    'iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypesResponse': {
      /** Format: uuid */
      correlationId: string;
      /** @description List of payment types and terminal groups where they are available. */
      paymentTypes: components['schemas']['iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentType'][];
    };
    /** @description Removal type (aka reason for deletion). */
    'iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalType': {
      /**
       * Format: uuid
       * @description Identifier.
       */
      id: string;
      /** @description Name of removal type. */
      name: string;
      /** @description Comment. */
      comment?: string | null;
      /** @description Can write off to cafe. */
      canWriteoffToCafe?: boolean;
      /** @description Can write off to waiter. */
      canWriteoffToWaiter?: boolean;
      /** @description Can write off to user. */
      canWriteoffToUser?: boolean;
      /** @description Require comments on operations. */
      reasonRequired?: boolean;
      /** @description Can be used manually. */
      manual?: boolean;
      /** @description Is deleted sign. */
      isDeleted?: boolean;
    };
    /** @description Request for organization's removal types (reasons for deletion). */
    'iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalTypesRequest': {
      /**
       * @description Organizations ids which removal types needs to be returned.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description Response with removal types (reasons for deletion) list. */
    'iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalTypesResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of removal types. */
      removalTypes: components['schemas']['iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalType'][];
    };
    /** @description Request for add order items to banquet. */
    'iikoTransport.PublicApi.Contracts.Reserves.AddOrderItemsToBanquetRequest': {
      /**
       * Format: uuid
       * @description Banquet ID.
       */
      reserveId: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Order items (may include ProductOrderItem or CompoundOrderItem). */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'][];
      /**
       * @description Combos.
       *
       *  > Allowed from version `7.6.1`.
       */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo'][]
        | null;
    };
    /** @description Request for add order payments to banquet. */
    'iikoTransport.PublicApi.Contracts.Reserves.AddOrderPaymentsToBanquetRequest': {
      /**
       * Format: uuid
       * @description Order ID.
       */
      reserveId: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Order payments. */
      payments: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'][];
    };
    /** @description Request for canceling the reservation. */
    'iikoTransport.PublicApi.Contracts.Reserves.CancelReserveRequest': {
      /**
       * Format: uuid
       * @description Organization ID of the reserve.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Reserve ID to cancel.
       */
      reserveId: string;
      /** @description Reason to cancel planned event. */
      cancelReason: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveCancelReason'];
    };
    /** @description Color. */
    'iikoTransport.PublicApi.Contracts.Reserves.Color': {
      /**
       * Format: int32
       * @description Alpha-component.
       */
      a: number;
      /**
       * Format: int32
       * @description Red-component.
       */
      r: number;
      /**
       * Format: int32
       * @description Green-component.
       */
      g: number;
      /**
       * Format: int32
       * @description Blue-component.
       */
      b: number;
    };
    /** @description Banquet/reserve creation model. */
    'iikoTransport.PublicApi.Contracts.Reserves.CreateReserveRequest': {
      /**
       * Format: uuid
       * @description Organization ID of a new banquet/reserve.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Front group ID an banquet/reserve must be sent to.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId?: string;
      /**
       * Format: uuid
       * @description Banquet/reserve ID. Must be unique.
       */
      id?: string | null;
      /**
       * @description Banquet/reserve external number.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalNumber?: string | null;
      /** @description Order. Used only at a banquet. */
      order?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.Request.ReserveOrder']
        | null;
      /** @description Customer. */
      customer: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RegularCustomer'];
      /**
       * @description Telephone number.
       * > Must begin with symbol "+" and must be at least 8 digits.
       */
      phone: string;
      /**
       * Format: int32
       * @deprecated
       * @description Number of guests.
       */
      guestsCount?: number | null;
      /** @description Banquet/reserve comment. */
      comment?: string | null;
      /**
       * Format: int64
       * @description Estimated banquet duration.
       */
      durationInMinutes: number;
      /** @description Whether to remind staff to prepare table beforehand. */
      shouldRemind: boolean;
      /** @description Reserved tables. */
      tableIds: string[];
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Estimated time when reserve will be closed or banquet will be started (Local for the terminal).
       * Reservation can be made up to 90 days prior to the date.
       * @example 2019-08-24 14:15:22.123
       */
      estimatedStartTime: string;
      /**
       * Format: int32
       * @deprecated
       * @description Timeout in seconds that specifies how much time is given for banquet/reserve to reach Syrve POS.
       * After this time, banquet/reserve is nullified if Syrve POS doesn't take it. By default - 8 seconds.
       */
      transportToFrontTimeout?: number | null;
      /** @description Guests information. */
      guests?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.GuestsInfo']
        | null;
      /**
       * @description Event type.
       *
       *  > Allowed from version `8.5.6`.
       */
      eventType?: string | null;
      /** @description Reserve creation parameters. */
      createReserveSettings?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettings']
        | null;
    };
    /** @description Font. */
    'iikoTransport.PublicApi.Contracts.Reserves.Font': {
      /** @description Font family. */
      fontFamily: string;
      /**
       * Format: float
       * @description Font size.
       */
      size: number;
      /** @description Font style. May be multiple values. */
      fontStyle: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.FontStyle'];
    };
    /**
     * @description Font style.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Reserves.FontStyle':
      | 'Regular'
      | 'Bold'
      | 'Italic'
      | 'Underline'
      | 'Strikeout';
    /** @description Request for get all restaurant sections of specified terminal groups, for which banquet/reserve booking are available. */
    'iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsRequest': {
      /**
       * @description Collection of terminal group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupIds: string[];
      /** @description Indicates whether table layout information should be returned... */
      returnSchema?: boolean;
      /**
       * Format: int64
       * @description Last modified time after.
       */
      revision?: number | null;
    };
    /** @description Response which contains all restaurant sections of specified terminal groups for which banquet/reserve booking are available. */
    'iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Restaurant sections. */
      restaurantSections: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.RestaurantSection'][];
      /**
       * Format: int64
       * @description Items list revision.
       */
      revision: number;
    };
    /** @description Request for check restaurant sections workload. */
    'iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsWorkloadRequest': {
      /**
       * @description Collection of restaurant section ID.
       *
       * Can be obtained by `/api/1/reserve/available_restaurant_sections` operation.
       */
      restaurantSectionIds: string[];
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Estimated start time (Local for the terminal). Lower limit.
       *
       * Order details are stored for 90 days.
       * @example 2019-08-24 14:15:22.123
       */
      dateFrom: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Estimated start time (Local for the terminal). Upper limit.
       * @example 2019-08-24 14:15:22.123
       */
      dateTo?: string | null;
    };
    /** @description Response for check restaurant sections workload. */
    'iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsWorkloadResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Banquets/reserves. */
      reserves: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveInWorkload'][];
    };
    /** @description Reserve guests information. */
    'iikoTransport.PublicApi.Contracts.Reserves.GuestsInfo': {
      /**
       * Format: int32
       * @description Guests count.
       */
      count: number;
    };
    /** @description Order. */
    'iikoTransport.PublicApi.Contracts.Reserves.Request.ReserveOrder': {
      /**
       * @description External menu ID.
       * @example null
       */
      menuId?: string | null;
      /** @description Order items. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'][];
      /** @description Combos included in order. */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo'][]
        | null;
      /**
       * @description Order payment components.
       *
       *  > Type **IikoCard** allowed from version `7.1.5`.
       */
      payments?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'][]
        | null;
      /** @description Order tips components. */
      tips?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment'][]
        | null;
      /** @description The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration. */
      sourceKey?: string | null;
      /** @description Discounts/surcharges. */
      discountsInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo']
        | null;
      /** @description Information about Loyalty app. */
      loyaltyInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo']
        | null;
      /**
       * Format: uuid
       * @description Order type ID.
       *
       * Can be obtained by `/api/1/deliveries/order_types` operation
       */
      orderTypeId?: string | null;
      /** @description Cheque additional information. */
      chequeAdditionalInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo']
        | null;
      /**
       * @description Order external data.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData'][]
        | null;
    };
    /** @description Banquet/reserve. */
    'iikoTransport.PublicApi.Contracts.Reserves.Reserve': {
      /** @description Client that placed the reserve. */
      customer: {
        type: 'iikoTransport.PublicApi.Contracts.Reserves.Reserve';
      } & Omit<
        components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer'],
        'type'
      >;
      /**
       * Format: int32
       * @description Estimated guests count.
       */
      guestsCount: number;
      /** @description Optional comment for reserve or banquet. */
      comment?: string | null;
      /**
       * Format: int64
       * @description Estimated banquet duration.
       */
      durationInMinutes: number;
      /** @description Whether to remind staff to prepare table beforehand. */
      shouldRemind: boolean;
      /** @description Status of the reserve or banquet. */
      status: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveStatus'];
      /** @description The reserve cancellation reason or null if the reserve hasn't been canceled. */
      cancelReason?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveCancelReason']
        | null;
      /** @description Reserved table IDs. */
      tableIds: string[];
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Estimated time when reserve will be closed or banquet will be started.
       * @example 2019-08-24 14:15:22.123
       */
      estimatedStartTime: string;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Time when guests came and reserve was closed or banquet was started.
       * @example 2019-08-24 14:15:22.123
       */
      guestsComingTime?: string | null;
      /** @description Telephone number. */
      phone?: string | null;
      /**
       * @description Event type.
       *
       *  > Allowed from version `8.5.6`.
       */
      eventType?: string | null;
      /** @description Order. Used only at a banquet. */
      order?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.Response.ReserveOrder']
        | null;
    };
    /**
     * @description Reason why planned event failed.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Reserves.ReserveCancelReason':
      | 'ClientNotAppeared'
      | 'ClientRefused'
      | 'Other';
    /** @description Banquet/reserve. */
    'iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo': {
      /**
       * Format: uuid
       * @description Banquet/reserve ID.
       */
      id: string;
      /** @description Banquet/reserve external number. */
      externalNumber?: string | null;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: int64
       * @description Timestamp of most recent banquet/reserve change that took place on Syrve Live server.
       */
      timestamp: number;
      /** @description Banquet/reserve creation status. In case of asynchronous creation, it allows to track the instance an banquet/reserve was validated/created in Syrve POS. */
      creationStatus: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CreationStatus'];
      /**
       * @description Banquet/reserve creation error details.
       * > Required only if "creationStatus"="Error".
       */
      errorInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorInfo']
        | null;
      /** @description Banquet/reserve is deleted. */
      isDeleted: boolean;
      /** @description Banquet/reserve. */
      reserve?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.Reserve']
        | null;
    };
    /** @description Banquet/reserve. */
    'iikoTransport.PublicApi.Contracts.Reserves.ReserveInWorkload': {
      /**
       * Format: uuid
       * @description Banquet/reserve ID.
       */
      id: string;
      /** @description Reserved tables. */
      tableIds: string[];
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Estimated time when reserve will be closed or banquet will be started (Local for the terminal).
       * @example 2019-08-24 14:15:22.123
       */
      estimatedStartTime: string;
      /**
       * Format: int64
       * @description Estimated banquet duration.
       */
      durationInMinutes: number;
      /**
       * Format: int32
       * @description Number of guests.
       */
      guestsCount: number;
    };
    /** @description Wrapping object (external) for return of banquets/reserves. */
    'iikoTransport.PublicApi.Contracts.Reserves.ReserveResponse': {
      /** Format: uuid */
      correlationId: string;
      /** @description Banquet/reserve. */
      reserveInfo: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo'];
    };
    /** @description Request for information about banquets/reserves using IDs. */
    'iikoTransport.PublicApi.Contracts.Reserves.ReservesByIdRequest': {
      /**
       * Format: uuid
       * @description Organization ID for which an order search will be performed.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description IDs of banquets/reserves information on which is required. */
      reserveIds: string[];
      /** @description Source keys. */
      sourceKeys?: string[] | null;
    };
    /** @description Wrapping object (external) for return of banquets/reserves. */
    'iikoTransport.PublicApi.Contracts.Reserves.ReservesResponse': {
      /** Format: uuid */
      correlationId: string;
      /** @description Banquets/reserves. */
      reserves: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo'][];
    };
    /**
     * @description Describes the status of a reserve or a banquet.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.Reserves.ReserveStatus':
      | 'New'
      | 'Started'
      | 'Closed';
    /** @description Order. */
    'iikoTransport.PublicApi.Contracts.Reserves.Response.ReserveOrder': {
      /** @description External menu ID. */
      menuId?: string | null;
      /**
       * Format: double
       * @description Order amount (after discount or surcharge).
       */
      sum: number;
      /**
       * Format: int32
       * @description Delivery No.
       */
      number: number;
      /** @description Delivery source. */
      sourceKey?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Invoice printing time (guest bill time).
       * @example 2019-08-24 14:15:22.123
       */
      whenBillPrinted?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Delivery closing time (Local for delivery terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenClosed?: string | null;
      /** @description Concept. */
      conception?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Conception']
        | null;
      /** @description Information about order guests. */
      guestsInfo:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.GuestsInfo']
        | null;
      /** @description Order items. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem'][];
      /** @description Combo. */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderCombo'][]
        | null;
      /** @description Payments. */
      payments?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentItem'][]
        | null;
      /** @description Tips. */
      tips?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsPaymentItem'][]
        | null;
      /** @description Discounts. */
      discounts?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountItem'][]
        | null;
      /** @description Order type. */
      orderType:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderType']
        | null;
      /**
       * Format: uuid
       * @description ID of the terminal group where the order is located.
       */
      terminalGroupId: string;
      /**
       * Format: double
       * @description The amount of processed payments.
       * <remarks>
       * null - only for unsupported POS versions.
       * </remarks>
       *
       *  > Allowed from version `7.6.0`.
       */
      processedPaymentsSum: number | null;
      /**
       * @description Information about Loyalty app.
       * <remarks>
       * null - only for unsupported POS versions.
       * </remarks>
       */
      loyaltyInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.LoyaltyInfo']
        | null;
      /**
       * @description Order external data.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalData'][]
        | null;
    };
    /** @description Restaurant section. */
    'iikoTransport.PublicApi.Contracts.Reserves.RestaurantSection': {
      /**
       * Format: uuid
       * @description Restaurant section ID.
       */
      id: string;
      /**
       * Format: uuid
       * @description Terminal group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /** @description Name. */
      name: string;
      /** @description Tables. */
      tables: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.Table'][];
      /** @description Table layout. */
      schema?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.SectionSchema']
        | null;
    };
    /** @description Restaurant section ellipse. */
    'iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionEllipse': {
      /** @description Color. */
      color: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.Color'];
      /**
       * Format: int32
       * @description X coordinate of left point of item.
       */
      x: number;
      /**
       * Format: int32
       * @description Y coordinate of top point of item.
       */
      y: number;
      /**
       * Format: int32
       * @description Z-index of item.
       */
      z: number;
      /**
       * Format: double
       * @description Item's angle of slope.
       */
      angle: number;
      /**
       * Format: int32
       * @description Item's width in px.
       */
      width: number;
      /**
       * Format: int32
       * @description Item's height in px.
       */
      height: number;
    };
    /** @description Restaurant section mark. */
    'iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionMark': {
      /** @description Text. */
      text: string;
      /** @description Font. */
      font: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.Font'];
      /** @description Color. */
      color: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.Color'];
      /**
       * Format: int32
       * @description X coordinate of left point of item.
       */
      x: number;
      /**
       * Format: int32
       * @description Y coordinate of top point of item.
       */
      y: number;
      /**
       * Format: int32
       * @description Z-index of item.
       */
      z: number;
      /**
       * Format: double
       * @description Item's angle of slope.
       */
      angle: number;
      /**
       * Format: int32
       * @description Item's width in px.
       */
      width: number;
      /**
       * Format: int32
       * @description Item's height in px.
       */
      height: number;
    };
    /** @description Restaurant section rectangle. */
    'iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionRectangle': {
      /** @description Color. */
      color: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.Color'];
      /**
       * Format: int32
       * @description X coordinate of left point of item.
       */
      x: number;
      /**
       * Format: int32
       * @description Y coordinate of top point of item.
       */
      y: number;
      /**
       * Format: int32
       * @description Z-index of item.
       */
      z: number;
      /**
       * Format: double
       * @description Item's angle of slope.
       */
      angle: number;
      /**
       * Format: int32
       * @description Item's width in px.
       */
      width: number;
      /**
       * Format: int32
       * @description Item's height in px.
       */
      height: number;
    };
    /** @description Restaurant section table. */
    'iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionTable': {
      /**
       * Format: uuid
       * @description Table ID.
       */
      tableId: string;
      /**
       * Format: int32
       * @description X coordinate of left point of item.
       */
      x: number;
      /**
       * Format: int32
       * @description Y coordinate of top point of item.
       */
      y: number;
      /**
       * Format: int32
       * @description Z-index of item.
       */
      z: number;
      /**
       * Format: double
       * @description Item's angle of slope.
       */
      angle: number;
      /**
       * Format: int32
       * @description Item's width in px.
       */
      width: number;
      /**
       * Format: int32
       * @description Item's height in px.
       */
      height: number;
    };
    /** @description Table layout. */
    'iikoTransport.PublicApi.Contracts.Reserves.SectionSchema': {
      /**
       * Format: int32
       * @description Layout width in px.
       */
      width: number;
      /**
       * Format: int32
       * @description Layout height in px.
       */
      height: number;
      /** @description Collection of restaurant section marks. */
      markElements: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionMark'][];
      /** @description Collection of restaurant section tables. */
      tableElements: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionTable'][];
      /** @description Collection of restaurant section rectangles. */
      rectangleElements: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionRectangle'][];
      /** @description Collection of restaurant section ellipses. */
      ellipseElements: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionEllipse'][];
      /**
       * Format: int64
       * @description Last modified time.
       */
      revision: number;
      /** @description Is schema deleted. */
      isDeleted: boolean;
    };
    /** @description Table. */
    'iikoTransport.PublicApi.Contracts.Reserves.Table': {
      /**
       * Format: uuid
       * @description Table ID.
       */
      id: string;
      /**
       * Format: int32
       * @description Number of table.
       */
      number: number;
      /** @description Table name specified in the organization settings. */
      name: string;
      /**
       * Format: int32
       * @description Seating capacity of the table.
       */
      seatingCapacity: number;
      /**
       * Format: int64
       * @description Last modified time.
       */
      revision: number;
      /** @description Is table deleted. */
      isDeleted: boolean;
    };
    /** @description Request for check items in out-of-stock list. */
    'iikoTransport.PublicApi.Contracts.StopLists.CheckStopListRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Front group ID the order must be sent to.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /** @description Order items. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'][];
    };
    /** @description Response for check items in out-of-stock list. */
    'iikoTransport.PublicApi.Contracts.StopLists.CheckStopListResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /**
       * @description Set of items in out-of-stock list.
       *
       * If null, none of requested items are in out-of-stock list.
       * > Present in response only if **not null**.
       */
      rejectedItems?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.StopListItem'][]
        | null;
    };
    /** @description Out-of-stock list. */
    'iikoTransport.PublicApi.Contracts.StopLists.StopListItem': {
      /**
       * Format: double
       * @description Product balance.
       */
      balance: number;
      /**
       * Format: uuid
       * @description Out-of-stock list product ID.
       */
      productId: string;
      /**
       * Format: uuid
       * @description Product size.
       * @example null
       */
      sizeId?: string | null;
    };
    /** @description DTO of out-of-stock lists request. */
    'iikoTransport.PublicApi.Contracts.StopLists.StopListsRequest': {
      /**
       * @description Organizations for which out-of-stock lists will be requested.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /**
       * @description Flag indicating the need to return the sizes of the dish.
       * @example false
       */
      returnSize?: boolean;
      /**
       * @description List of terminal groups for which you need to get out-of-stock lists.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupsIds?: string[] | null;
    };
    /** @description Status of out-of-stock lists for a specified organization */
    'iikoTransport.PublicApi.Contracts.StopLists.StopListsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Set of out-of-stock lists */
      terminalGroupStopLists: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopList, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description Out-of-stock list status for a group of front terminals. */
    'iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopList': {
      /**
       * Format: uuid
       * @description Terminal ID.
       */
      terminalGroupId?: string;
      /** @description Out-of-stock list. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.StopListItem'][];
    };
    /** @description Out-of-stock list update for a group of front terminals. */
    'iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopListUpdate': {
      /**
       * Format: uuid
       * @description Terminal ID.
       */
      id: string;
      /** @description Whether out-of-stock list is fully updated. */
      isFull: boolean;
    };
    /** @description Out-of-stock list update info. */
    'iikoTransport.PublicApi.Contracts.StopLists.WebHookOnStopListChangeData': {
      /** @description Terminal groups with out-of-stock list updates. */
      terminalGroupsStopListsUpdates: components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopListUpdate'][];
    };
    /** @description Request for adding customer to order. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.AddCustomerToTableOrderRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Order ID.
       */
      orderId: string;
      /** @description Guest info. */
      customer: components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.TableOrderCustomer'];
    };
    /** @description Order creation model. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.CreateTableOrderRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Front group ID an order must be sent to.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /** @description Order. */
      order?: components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.TableOrder'];
      /** @description Order creation parameters. */
      createOrderSettings?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettings']
        | null;
    };
    /** @description Request for information about orders using IDs. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.GetTableOrdersByIdRequest': {
      /** @description Source keys. */
      sourceKeys?: string[] | null;
      /**
       * @description Organization IDs.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /**
       * @description Order IDs.
       *
       * > Required if "posOrderIds" is null. Must be null if "posOrderIds" is not null.
       */
      orderIds?: string[] | null;
      /**
       * @description POS order IDs.
       *
       * > Required if "orderIds" is null. Must be null if "orderIds" is not null.
       */
      posOrderIds?: string[] | null;
      /** @description Keys for retrun external data information. */
      returnExternalDataKeys?: string[] | null;
    };
    /** @description Request for information about orders using table IDs. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.GetTableOrdersByTableRequest': {
      /** @description Source keys. */
      sourceKeys?: string[] | null;
      /**
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /**
       * @description Table IDs.
       *
       * Can be obtained by `/api/1/reserve/available_restaurant_sections` operation.
       */
      tableIds: string[];
      /** @description Order statuses. */
      statuses?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Orders.Common.OrderStatus'][]
        | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order creation date (terminal time zone). Lower limit.
       *
       * Order details are stored for 90 days.
       * @example 2019-08-24 14:15:22.123
       */
      dateFrom?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order creation date (terminal time zone). Upper limit.
       * @example 2019-08-24 14:15:22.123
       */
      dateTo?: string | null;
    };
    /** @description Table order guests information. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.GuestsInfo': {
      /**
       * Format: int32
       * @description Guests count.
       */
      count: number;
    };
    /** @description Request for init orders on table by POS orders. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.InitTableOrderByPosOrderRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Terminal group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /** @description POS order IDs. */
      posOrderIds: string[];
    };
    /** @description Request for init orders on table. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.InitTableOrderRequest': {
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: uuid
       * @description Terminal group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /**
       * @description Table IDs.
       *
       * Can be obtained by `/api/1/reserve/available_restaurant_sections` operation.
       */
      tableIds: string[];
    };
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.TableOrder': {
      /**
       * Format: uuid
       * @description Order ID.
       */
      id?: string | null;
      /**
       * @description Order external number.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalNumber?: string | null;
      /**
       * @description Table IDs.
       *
       * Can be obtained by `/api/1/reserve/available_restaurant_sections` operation.
       */
      tableIds?: string[] | null;
      /**
       * @description Guest.
       *
       *  > Allowed from version `7.5.2`.
       */
      customer?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RegularCustomer']
        | null;
      /**
       * @description Guest phone.
       *
       *  > Allowed from version `7.5.2`.
       */
      phone?: string | null;
      /**
       * Format: int32
       * @deprecated
       * @description Amount of guests in the order.
       *
       *  > Allowed from version `7.6.1`.
       */
      guestCount?: number | null;
      /**
       * @description Guests information.
       *
       *  > Allowed from version `7.6.1`.
       */
      guests?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Request.GuestsInfo']
        | null;
      /**
       * @description Tab name (only for fastfood terminals group in tab mode).
       *
       *  > Allowed from version `7.6.1`.
       */
      tabName?: string | null;
      /**
       * @description External menu ID.
       * @example null
       */
      menuId?: string | null;
      /** @description Order items. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem'][];
      /** @description Combos included in order. */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo'][]
        | null;
      /**
       * @description Order payment components.
       *
       *  > Type **IikoCard** allowed from version `7.1.5`.
       */
      payments?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment'][]
        | null;
      /** @description Order tips components. */
      tips?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment'][]
        | null;
      /** @description The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration. */
      sourceKey?: string | null;
      /** @description Discounts/surcharges. */
      discountsInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo']
        | null;
      /** @description Information about Loyalty app. */
      loyaltyInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo']
        | null;
      /**
       * Format: uuid
       * @description Order type ID.
       *
       * Can be obtained by `/api/1/deliveries/order_types` operation
       */
      orderTypeId?: string | null;
      /** @description Cheque additional information. */
      chequeAdditionalInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo']
        | null;
      /**
       * @description Order external data.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData'][]
        | null;
    };
    'iikoTransport.PublicApi.Contracts.TableOrders.Request.TableOrderCustomer': {
      /**
       * Format: uuid
       * @description Existing customer ID in RMS.
       * > If null - the phone number and name is searched in database, otherwise the new customer is created in RMS.
       */
      id?: string | null;
      /**
       * @description Name of customer.
       * > Required if "id" == null.
       * > Not required if "id" specified.
       */
      name?: string | null;
      /** @description Last name. */
      surname?: string | null;
      /** @description Comment. */
      comment?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Date of birth.
       * @example 2019-08-24 14:15:22.123
       */
      birthdate?: string | null;
      /** @description Email. */
      email?: string | null;
      /** @description Whether customer receives order status notification messages. */
      shouldReceiveOrderStatusNotifications?: boolean | null;
      /** @description Gender. */
      gender?: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Common.Gender'];
      /**
       * @description Customer phone.
       * > Required if "id" == null.
       * > Not required if "id" specified.
       */
      phone?: string | null;
    };
    /**
     * @description Need to split order between cash registers.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.TableOrders.Response.SplitOrderBetweenCashRegisters':
      | 'Disabled'
      | 'Allowed'
      | 'Required';
    /** @description Order. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrder': {
      /**
       * @description Table IDs.
       *
       * Can be obtained by `/api/1/reserve/available_restaurant_sections` operation.
       */
      tableIds: string[];
      /**
       * @description Guest.
       *
       *  > Allowed from version `7.5.2`.
       */
      customer?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RegularCustomer']
        | null;
      /**
       * @description Guest phone.
       *
       *  > Allowed from version `7.5.2`.
       */
      phone?: string | null;
      /** @description Order status. */
      status: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderStatus'];
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Order creation date (terminal time zone).
       * @example 2019-08-24 14:15:22.123
       */
      whenCreated?: string | null;
      /** @description Order waiter. */
      waiter?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Employee']
        | null;
      /** @description Tab name (only for fastfood terminals group in tab mode). */
      tabName?: string | null;
      /**
       * @description Need to split order between cash registers.
       * <remarks>
       * Not empty for orders in statuses New or Bill.
       * </remarks>
       */
      splitOrderBetweenCashRegisters?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.SplitOrderBetweenCashRegisters']
        | null;
      /** @description External menu ID. */
      menuId?: string | null;
      /**
       * Format: double
       * @description Order amount (after discount or surcharge).
       */
      sum: number;
      /**
       * Format: int32
       * @description Delivery No.
       */
      number: number;
      /** @description Delivery source. */
      sourceKey?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Invoice printing time (guest bill time).
       * @example 2019-08-24 14:15:22.123
       */
      whenBillPrinted?: string | null;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Delivery closing time (Local for delivery terminal).
       * @example 2019-08-24 14:15:22.123
       */
      whenClosed?: string | null;
      /** @description Concept. */
      conception?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Conception']
        | null;
      /** @description Information about order guests. */
      guestsInfo:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.GuestsInfo']
        | null;
      /** @description Order items. */
      items: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem'][];
      /** @description Combo. */
      combos?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderCombo'][]
        | null;
      /** @description Payments. */
      payments?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentItem'][]
        | null;
      /** @description Tips. */
      tips?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsPaymentItem'][]
        | null;
      /** @description Discounts. */
      discounts?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountItem'][]
        | null;
      /** @description Order type. */
      orderType:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderType']
        | null;
      /**
       * Format: uuid
       * @description ID of the terminal group where the order is located.
       */
      terminalGroupId: string;
      /**
       * Format: double
       * @description The amount of processed payments.
       * <remarks>
       * null - only for unsupported POS versions.
       * </remarks>
       *
       *  > Allowed from version `7.6.0`.
       */
      processedPaymentsSum: number | null;
      /**
       * @description Information about Loyalty app.
       * <remarks>
       * null - only for unsupported POS versions.
       * </remarks>
       */
      loyaltyInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.LoyaltyInfo']
        | null;
      /**
       * @description Order external data.
       *
       *  > Allowed from version `8.0.6`.
       */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalData'][]
        | null;
    };
    /** @description Order. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo': {
      /**
       * Format: uuid
       * @description Order ID.
       */
      id: string;
      /**
       * Format: uuid
       * @description POS order ID.
       */
      posId?: string | null;
      /** @description Order external number. */
      externalNumber?: string | null;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /**
       * Format: int64
       * @description Timestamp of most recent order change that took place on Syrve Live server.
       */
      timestamp: number;
      /** @description Order creation status. In case of asynchronous creation, it allows to track the instance an order was validated/created in Syrve POS. */
      creationStatus: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CreationStatus'];
      /**
       * @description Order creation error details.
       * > Required only if "creationStatus"="Error".
       */
      errorInfo?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Errors.ErrorInfo']
        | null;
      /**
       * @description Order creation details.
       * > Field is filled up if "creationStatus"="Success".
       */
      order?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrder']
        | null;
    };
    /** @description Wrapping object (external) for a delivery order return. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Order. */
      orderInfo: components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo'];
    };
    /** @description Wrapping object (external) for return of orders. */
    'iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrdersResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Orders. */
      orders: components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo'][];
    };
    /** @description Request to awake terminal groups from sleep mode. */
    'iikoTransport.PublicApi.Contracts.Terminals.AwakeTerminalGroupsRequest': {
      /**
       * @description  Organization IDs.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /**
       * @description List of terminal groups IDs.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupIds: string[];
    };
    /** @description Response for request to awake terminal groups from sleep mode. */
    'iikoTransport.PublicApi.Contracts.Terminals.AwakeTerminalGroupsResponse': {
      /** @description Identifiers of successfully processed terminal groups. */
      successfullyProcessed?: string[] | null;
      /** @description Identifiers of terminal groups whose processing failed. */
      failedProcessed?: string[] | null;
    };
    /** @description Request for list of terminal groups. */
    'iikoTransport.PublicApi.Contracts.Terminals.GetTerminalGroupsByOrganizationsRequest': {
      /**
       * @description Organizations IDs for which information is requested.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
    };
    /** @description DTO containing terminal groups details */
    'iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup': {
      /**
       * Format: uuid
       * @description Delivery group ID.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      id: string;
      /**
       * Format: uuid
       * @description Organization ID to which delivery group belongs.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Terminal group name. */
      name: string;
      /**
       * @deprecated
       * @description Group address. Not used.
       */
      address: string | null;
      /**
       * Format: date-span
       * @description Terminal group time zone.
       */
      timeZone: string;
      /** @description Terminal group external data. */
      externalData?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Common.ExternalData'][]
        | null;
    };
    /** @description DTO containing terminal group availability details. */
    'iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupAliveInfo': {
      /** @description Attribute that shows whether a terminal is available to request processing. */
      isAlive: boolean;
      /**
       * Format: uuid
       * @description ID of front group of terminals.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupId: string;
      /**
       * Format: uuid
       * @description Organizations ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
    };
    /** @description Request for terminal group availability details. */
    'iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsIsAliveRequest': {
      /**
       * Format: uuid
       * @deprecated
       * @description Organization ID. Deprecated, use "organizationIds".
       */
      organizationId?: string | null;
      /**
       * @description  Organization IDs.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds?: string[];
      /**
       * @description List of terminal groups IDs.
       *
       * Can be obtained by `/api/1/terminal_groups` operation.
       */
      terminalGroupIds: string[];
    };
    /** @description DTO containing terminal group availability details. */
    'iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsIsAliveResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Availability attribute of each requested terminal. */
      isAliveStatus: components['schemas']['iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupAliveInfo'][];
    };
    /** @description Request for list of terminal groups. */
    'iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsRequest': {
      /**
       * @description Organizations IDs for which information is requested.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /** @description Attribute that shows that response contains disabled terminal groups. */
      includeDisabled?: boolean | null;
      /** @description External data keys that have to be returned. */
      returnExternalData?: string[] | null;
    };
    /** @description DTO containing terminal groups details. */
    'iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of terminal groups broken down by organizations. */
      terminalGroups: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
      /**
       * @description Terminal groups are in sleep mode because they are not active.
       *
       * Can be awakened by `/api/1/terminal_groups/awake` operation.
       */
      terminalGroupsInSleep: components['schemas']['iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup, iikoTransport.PublicApi.Contracts, Version=8.6.6.5, Culture=neutral, PublicKeyToken=null]]'][];
    };
    /** @description Tips type. */
    'iikoTransport.PublicApi.Contracts.TipsTypes.TipsType': {
      /**
       * Format: uuid
       * @description Tips type ID.
       *
       * Can be obtained by `/api/1/tips_types` operation.
       */
      id: string;
      /** @description Tips type name. */
      name: string;
      /**
       * @description Supported organizations IDs.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationIds: string[];
      /** @description Supported order service types. */
      orderServiceTypes: components['schemas']['iikoTransport.PublicApi.Contracts.OrderTypes.OrderServiceType'][];
      /** @description Supported payment types IDs. */
      paymentTypesIds: string[];
    };
    /** @description Response to request for tips types by api-login`s rms group. */
    'iikoTransport.PublicApi.Contracts.TipsTypes.TipsTypesResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description List of tips types for rms group. */
      tipsTypes: components['schemas']['iikoTransport.PublicApi.Contracts.TipsTypes.TipsType'][];
    };
    /** @description WebHook notification about delivery order saving error. */
    'iikoTransport.PublicApi.Contracts.WebHooks.DeliveryOrderErrorWebHookEventInfo': {
      /**
       * @description Event type.
       * @example DeliveryOrderError
       */
      eventType?: Record<string, never>;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Event date and time (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      eventTime?: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId?: string;
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
      /** @description Event details. */
      eventInfo?: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo'];
    };
    /** @description WebHook notification about delivery order update. */
    'iikoTransport.PublicApi.Contracts.WebHooks.DeliveryOrderUpdateWebHookEventInfo': {
      /**
       * @description Event type.
       * @example DeliveryOrderUpdate
       */
      eventType?: Record<string, never>;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Event date and time (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      eventTime?: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId?: string;
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
      /** @description Event details. */
      eventInfo?: components['schemas']['iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo'];
    };
    /** @description Request to get webhooks settings for specified organization. */
    'iikoTransport.PublicApi.Contracts.WebHooks.GetWebHookSettingsRequest': {
      /**
       * Format: uuid
       * @description Organization UOC Id.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
    };
    /** @description Response to get webhooks settings for specified organization. */
    'iikoTransport.PublicApi.Contracts.WebHooks.GetWebHookSettingsResponse': {
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId: string;
      /** @description Api login name. */
      apiLoginName: string | null;
      /** @description Webhook handler url. */
      webHooksUri: string | null;
      /** @description Authorization token to pass to the webhook handler. */
      authToken?: string | null;
      /** @description Webhooks filter. */
      webHooksFilter?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHooksFilter']
        | null;
    };
    /** @description WebHook notification about employee personal shift update. */
    'iikoTransport.PublicApi.Contracts.WebHooks.PersonalShiftWebHookEventInfo': {
      /**
       * @description Event type.
       * @example PersonalShift
       */
      eventType?: Record<string, never>;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Event date and time (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      eventTime?: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId?: string;
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
      /** @description Event details. */
      eventInfo?: components['schemas']['iikoTransport.PublicApi.Contracts.Employees.PersonalShift'];
    };
    /** @description WebHook notification about reserve saving error. */
    'iikoTransport.PublicApi.Contracts.WebHooks.ReserveErrorWebHookEventInfo': {
      /**
       * @description Event type.
       * @example ReserveError
       */
      eventType?: Record<string, never>;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Event date and time (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      eventTime?: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId?: string;
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
      /** @description Event details. */
      eventInfo?: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo'];
    };
    /** @description WebHook notification about reserve update. */
    'iikoTransport.PublicApi.Contracts.WebHooks.ReserveUpdateWebHookEventInfo': {
      /**
       * @description Event type.
       * @example ReserveUpdate
       */
      eventType?: Record<string, never>;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Event date and time (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      eventTime?: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId?: string;
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
      /** @description Event details. */
      eventInfo?: components['schemas']['iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo'];
    };
    /** @description WebHook notification about stop list update. */
    'iikoTransport.PublicApi.Contracts.WebHooks.StopListUpdateWebHookEventInfo': {
      /**
       * @description Event type.
       * @example StopListUpdate
       */
      eventType?: Record<string, never>;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Event date and time (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      eventTime?: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId?: string;
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
      /** @description Event details. */
      eventInfo?: components['schemas']['iikoTransport.PublicApi.Contracts.StopLists.WebHookOnStopListChangeData'];
    };
    /** @description WebHook notification about table order saving error. */
    'iikoTransport.PublicApi.Contracts.WebHooks.TableOrderErrorWebHookEventInfo': {
      /**
       * @description Event type.
       * @example TableOrderError
       */
      eventType?: Record<string, never>;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Event date and time (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      eventTime?: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId?: string;
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
      /** @description Event details. */
      eventInfo?: components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo'];
    };
    /** @description WebHook notification about table order update. */
    'iikoTransport.PublicApi.Contracts.WebHooks.TableOrderUpdateWebHookEventInfo': {
      /**
       * @description Event type.
       * @example TableOrderUpdate
       */
      eventType?: Record<string, never>;
      /**
       * Format: yyyy-MM-dd HH:mm:ss.fff
       * @description Event date and time (UTC).
       * @example 2019-08-24 14:15:22.123
       */
      eventTime?: string;
      /**
       * Format: uuid
       * @description Organization ID.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId?: string;
      /**
       * Format: uuid
       * @description Operation ID.
       */
      correlationId?: string;
      /** @description Event details. */
      eventInfo?: components['schemas']['iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo'];
    };
    /** @description Request to add or update webhooks settings for listed api logins of the specified organization. */
    'iikoTransport.PublicApi.Contracts.WebHooks.UpdateWebHookSettingsRequest': {
      /**
       * Format: uuid
       * @description Organization UOC Id.
       *
       * Can be obtained by `/api/1/organizations` operation.
       */
      organizationId: string;
      /** @description Webhook handler url. */
      webHooksUri: string;
      /** @description Authorization token to pass to the webhook handler. */
      authToken?: string | null;
      /** @description Webhooks filter. */
      webHooksFilter?:
        | components['schemas']['iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHooksFilter']
        | null;
    };
    /**
     * @description Types of events which can be notified by a webhook.
     * @enum {string}
     */
    'iikoTransport.PublicApi.Contracts.WebHooks.WebHookEventType':
      | 'DeliveryOrderUpdate'
      | 'DeliveryOrderError'
      | 'ReserveUpdate'
      | 'ReserveError'
      | 'TableOrderUpdate'
      | 'TableOrderError'
      | 'StopListUpdate'
      | 'PersonalShift';
    ModifierRestrictionsDto: {
      /** @description Minimum amount */
      minQuantity?: number;
      /** @description Maximum amount */
      maxQuantity?: number;
      /** @description Amount free of charge */
      freeQuantity?: number;
      /** @description Default amount */
      byDefault?: number;
    };
    NutritionInfoDto: Record<string, never>;
    TagDto: {
      id?: string;
      name?: string;
    };
    TaxCategoryDto: {
      id?: string;
      name?: string;
      /** Format: float */
      percentage?: number;
    };
    TransportItemDto: {
      itemSizes?: components['schemas']['TransportItemSizeDto'][];
      /**
       * @description Product code
       * @example 002345-35cm
       */
      sku?: string;
      /**
       * @description Product name
       * @example Chicken Parmegiano
       */
      name?: string;
      /**
       * @description Product description
       * @example Delicate taste, juicy chicken fillet, mushrooms, Cheddar cheese and Mozzarella cheese, oregano, Parmegiano sauce
       */
      description?: string;
      allergenGroups?: components['schemas']['AllergenGroupDto'][];
      /**
       * itemId
       * Format: uuid
       * @description Product ID
       */
      itemId?: string;
      /**
       * modifierSchemaId
       * Format: uuid
       * @description Modifier schema ID
       */
      modifierSchemaId?: string;
      taxCategory?: components['schemas']['TaxCategoryDto'];
      /**
       * Format: enum
       * @description Product or compound. Depends on modifiers scheme existence
       * @enum {string}
       */
      orderItemType?: 'Product' | 'Compound';
    };
    TransportItemSizeDto: {
      prices?: components['schemas']['TransportPriceDto'][];
      itemModifierGroups?: components['schemas']['TransportModifierGroupDto'][];
      /** @description Unique size code, consists of the product code and the name of the size, if the product has one size, then the size code will be equal to the product code */
      sku?: string;
      sizeCode?: string;
      /** @description Name of the product size, the name can be empty if there is only one size in the list */
      sizeName?: string;
      /** @description Whether it is a default size of the product. If the product has one size, then the parameter will be true, if the product has several sizes, none of them can be default. */
      isDefault?: boolean;
      /**
       * Format: float
       * @description Size's weight
       * @example 0
       */
      portionWeightGrams?: number;
      /**
       * sizeId
       * Format: uuid
       * @description ID size, can be empty if the default size is selected and it is the only size in the list
       */
      sizeId?: string;
      nutritionPerHundredGrams?: components['schemas']['NutritionInfoDto'];
      /**
       * buttonImageUrl
       * @description links to images
       * @example https://102922.selcdn.ru/ecomm/someimage.png
       */
      buttonImageUrl?: string;
      buttonImageCroppedUrl?: string[];
    };
    TransportMenuCategoryDto: {
      items?: components['schemas']['TransportItemDto'][];
      /**
       * Format: uuid
       * @description ID of the category of the external menu
       */
      id?: string;
      /** @description Category name of the external menu */
      name?: string;
      /** @description Category description */
      description?: string;
      /**
       * @description Links to images
       * @example https://102922.selcdn.ru/ecomm/someimage.png
       */
      buttonImageUrl?: string;
      headerImageUrl?: string;
    };
    TransportModifierGroupDto: {
      items?: components['schemas']['TransportModifierItemDto'][];
      /** @description Modifiers group name */
      name?: string;
      /** @description Modifiers group description */
      description?: string;
      restrictions?: components['schemas']['ModifierRestrictionsDto'];
      /** @description Whether the modifier can be splitted */
      canBeDivided?: boolean;
      /**
       * itemGroupId
       * Format: uuid
       * @description Modifiers group id
       */
      itemGroupId?: string;
      /** @description Whether child modifiers can have their own restrictions, or only group ones */
      childModifiersHaveMinMaxRestrictions?: boolean;
      /** @description Modifiers group code */
      sku?: string;
    };
    TransportModifierItemDto: {
      prices?: components['schemas']['TransportPriceDto'][];
      /** @description Modifier's code */
      sku?: string;
      /** @description Modifier's name */
      name?: string;
      /** @description Modifier's description */
      description?: string;
      /** @description Links to images */
      buttonImage?: string;
      restrictions?: components['schemas']['ModifierRestrictionsDto'];
      allergenGroups?: components['schemas']['AllergenGroupDto'][];
      nutritionPerHundredGrams?: components['schemas']['NutritionInfoDto'];
      /**
       * Format: float
       * @description Modifier's weight in gramms
       * @example 0
       */
      portionWeightGrams?: number;
      tags?: components['schemas']['TagDto'][];
      /**
       * itemId
       * Format: uuid
       * @description Modifier's Id
       */
      itemId?: string;
    };
    TransportPriceDto: {
      /** @description Organization id */
      organizationId?: string;
      /**
       * Format: float
       * @description Product size prices for the organization, if the value is null, then the product/size is not for sale, the price always belongs to the price category that was selected at the time of the request
       * @example 20.5
       */
      price?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
